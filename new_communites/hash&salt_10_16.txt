harder, result, length, ---------------------------------------------------

result,length,harder,history,hacker
i don t know how safe could it be and how difficult is for the hacker to determinate the technique i use the thing is that the result has the same length as the hash and is harder to determinate a salt so if for any reason in the history hacker uses a rainbow table and catches a probable result it will be the wrong

attacks,common,passwords,harder,usernames,numbers
most attacks involve generating hash for common passwords so for reasonably complicated passwords it becomes harder especially with salt some people use usernames as salt others use randomly generated numbers

password,crypt,secure,brute,output,hackers,passwords
so when i see that the salt is stored in the hash password and that you use that hash password as salt i think crypt + salt is not more secure against a brute force on output hackers who managed to steal hash passwords

data, unique, cost, ---------------------------------------------------

cost,data,larger,value
likely not as cheap as xor against n values but seems like there s possibility for better quality results at a minimal extra cost especially if the data being hash is much larger than the salt value

data,unique,faster,need,username
you ll probably need to get data anyway so the unique salt is probably faster too because you won t need to calculate the hash over username

nothing,random,string,passwords,password,unique
this salt is nothing more than a random arbitrary string that you concatenate to the passwords and it will make your hash password unique

impression, company, operations, ---------------------------------------------------

impression,passwords,secure,company,operations
i get the impression that most people think that hashing salt passwords is the more secure way of handling passwords but i can t figure out a way to comply with current company operations when using hash passwords

situation,password,secure,credentials,hands
in this situation storing password hash and the salt is more secure than storing the credentials encrypted or not because an attacker would have no way of getting the password back even if he manages to get his hands on both the hash and the salt

longer, example, field, ---------------------------------------------------

example,field,characters,longer,trimmed,password
example the salt field might only allow a 64 characters while the generated salt might be longer therefore when you save the salt it gets trimmed which ultimately changes the hash password

string,hard,password,longer,long,time
you can safely store the salt in the db because working out a string from its hash is just as hard when you know some of the string as it is when you know none of it provided the password itself is longer than the salt and long enough and strong enough to take a long time to crack by brute force at least 6 chars with at least one case change and a number or non-alphanumeric i d say

other---------------------------------------------------

sha-512,higher,security,scheme,better,high
salt sha-512 offers a higher level of security and implementing a scheme where you stretch the hash is even better do some high number of iterations of sha-512 - starting with the password+salt of course

randomness,characters,better,several
the more randomness and more characters your salt has the better for the hash but anything that s several characters long and random works

restructuring,database,field,better,currant,person
restructuring of the database to just add an salt field is better option or the only one really if your going to do it properly but you could use your currant hash field to store the salt as other person posted

protection,rainbow,tables,worth
however using a salt offers more protection against rainbow tables precalculated hash tables so they re still worth using

lack,harder,password
the lack of salt is harder to expoit here than with password hash since the hash is not directly known

powerful,seed,internal,state,multiple,size,alignment,input,function
prepending a salt is also more powerful than directly setting the seed values because in addition to changing the internal state of the hash if the salt is not a multiple of the digest block size then it can also perturb the alignment with which the input is fed into the hash function

