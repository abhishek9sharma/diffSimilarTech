non-native, native, stunned, ---------------------------------------------------

stunned,faster,simple,native
i am stunned right now seeing a lodash performing 100-150 faster than underscore.js in even simple native functions such as array.every in chrome

slower,native,browsers,v8
in general and underscore.js are slower native bind is fast on some browsers slow on v8 and lodash can distinguish between the two

charliefl,faster,browser
the solution from charliefl is approximately 100x faster than underscore.js depending on browser in this case and lodash being up to 2x faster than underscore.js

faster,use,non-native
if i remember correctly lodash argued they were faster than underscore.js because the use non-native functions for key operations

faster,complete
you can also use underscore.js but lodash is faster more complete and you can create custom build with only what you need

better, consistency, performance, ---------------------------------------------------

comment,likely,better,solution
edit as pointed out in the comment lodash is likely to be a better solution than underscore.js

open,better,version,flattendeep,element
if you re open to using lodash which is a better version of underscore.js imo this can be expressed fairly simply using flattendeep on each element of your multi-dimensional array

better,details,blog
i believe lodash is a better choice over underscore.js more details in this blog post

note,answer,better,job
note previously this answer recommended underscore.js but lodash has done a better job of getting bugs fixed and addressing issues with consistency

john-david,dalton,better,performance
keep in mind that i am using lodash by john-david dalton instead of underscore.js because lodash provides better performance and a custom build process

_.isequal,function,better,performance
then when you extract the keys of each object you can compare using _.isequal function by provided by lodash instead of underscore.js usually lodash has better performance

superset,better,performance,consistency
i can help you with lodash which is a superset of underscore.js and much better than underscore.js when it comes to performance and consistency see lodash vs underscore.js

others---------------------------------------------------

ps,possible,development,active
ps i d suggest using lodash instead of underscore.js if possible as lodash development is more active but that s my opinion

slower
lodash is definitely not slower than underscore.js

easiest,solution,features,latest
the easiest solution is to just replace underscore.js with lodash which has even more features than the latest underscore.js

faster,native,post,justifiable,favour,foreach
based on why lodash is faster than native foreach post maybe it s justifiable to use lodash in favour of both underscore.js and native foreach to loop

compatible,runs,quicker,better,doco
apparently almost completely compatible lodash runs quicker apparently but underscore.js has better doco imho

iteration,method,source,convoluted
basically collections are things that implement some kind of iterable interface and they internally use the same iteration method though lodash source is a bit more convoluted than underscore.js

faster,implementation,utility,methods
lodash is another faster implementation of underscore.js that will provide a lot of utility methods for working wit arrays objects functions etc

years,old,place,solution
given that this is 4 years old and lodash has more or less taken the place of underscore.js i thought i would share this solution using lodash

modular,5kb,17kb,lighter
lodash is more modular than underscore.js underscore.js around 5kb lodash around 17kb but is generally lighter because you only include the specific modules you need

