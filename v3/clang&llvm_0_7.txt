others---------------------------------------------------

good,options,libc++,static,features,compatible,gnu,stl,issue,optimizer,segfault
good options are llvm libc++ static library fewer features more compatible with clang and gnu stl static library more features i had an issue that required me to turn the clang optimizer to -oz to prevent a segfault

-emit-llvm,-s,test.c,gcc,ir,readable
when i compile with clang -emit-llvm -s -o3 test.c gcc would also work but the llvm ir is more readable in my opinion i get

fiber,apple,use,thread_local,better,standard,abi
first fiber won t compile with apple clang because of the use of thread_local which apple does not support according to what i found online they think they can implement it better than standard llvm and don t want to introduce it only to break abi later

need,gcc
essentially there s no need for gcc any more llvm + clang is more than enough

faster,gcc,frontend,accurate
llvm compiles code faster than gcc may create code that runs faster and the clang frontend provides more accurate error messages than gcc Ã¢ so there are definitely reasons for switching

program,input,runs,machine,slower
the reference c++ program with input 28 compiled with llvm 8.0.0 runs in 0.67s on my machine the same with clang 3.7 is marginally slower 0.68s

llvm-g++,gcc,latter,apple,errors,stick,wrong
libstdc++ does this a lot more than libc++ and the former is the default library for llvm-g++ gcc llvm the latter for clang apple llvm which means a lot of errors will seem to go away when you switch to gcc llvm or just stick with apple llvm and switch your library but your code is still wrong

