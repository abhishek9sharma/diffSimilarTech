memory, heap, stores, ---------------------------------------------------

insert,faster,stores,memory
operations like prepend and insert are usually faster than with qvector because of the way qlist stores its items in memory see algorithmic complexity for details and its index-based api is more convenient than qlinkedlist s iterator-based api

pointers,heap,worse
if it stores it as pointers on the heap won t qlist be much worse off than qvector

better,performance,memory,heap,sizeof
qvector will usually give better performance than qlist because qvector always stores its items sequentially in memory where qlist will allocate its items on the heap unless sizeof t sizeof void and t has been declared to be either a q_movable_type or a q_primitive_type using q_declare_typeinfo

easy, words, efficient, ---------------------------------------------------

better,performance
give better performance than qlist because qvector always

words,better,efficient,transactions
which brings me to the point - if transaction ids are per savings account they would be sequential in other words you will be better off with the qlist or even better a qvector because it will be a little more efficient since you will only be appending transactions

size,better,store
size qlist performs better than qvector because it doesn t store the

better,easy
qvector is better than qlist in this case because it s easy to resize it

size,element,type,pointer,better,store,objects
if the size of the qlist s element type is greater than the pointer s size qlist performs better than qvector because it doesn t store the objects sequentially but stores sequentially pointers to heap copies

best,container,better
most often qvector is not the best container to use usually qlist is much better

others---------------------------------------------------


qlist code is generally less optimized than qvector one

