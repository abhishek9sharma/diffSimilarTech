view, views, pages, ---------------------------------------------------

web,applications,universal,views,interfaces,implementation,details
mvc framework is suitable only for web applications while mvp can be more universal and can work for web forms and windows forms - views implement interfaces for presenter to use and views themselves handle implementation details pertaining to navigation

web,pages,interfaces,view,layer,data
i have been searching on the net and i made a couple of examples of both of them but i m even more confused because in some sample web pages mvp uses more than 2 interfaces to communicate the presenter with the view layer some ones even have completely blank interfaces only declarated but in other ones it only takes two interfaces to transport data from presenter to view

others---------------------------------------------------

activity,controller,la,better,architectural
imho activity is your controller or perhaps presenter a la mvp is the better architectural analogy layout xml and their constituent views are the view layer and your database is your model

api,boundaries,cleaner,boundary,view,possible,mvc
since the flow of logic is still basically a loop but the api boundaries of the presenter is a cleaner boundary than view in mvp which helps decouple v and m in mvp than is possible in mvc

main,noob,perspective,interactor
my main and pretty noob question is it ok from an mvp perspective to have a presenter that communicates with more than one interactor or should just be one interactor per presenter

benefits,view
i think you would lose a lot of those benefits with mvp as the view and presenter are more tightly coupled

ui,events,passive,information
to summarise the differences controllers in the mvc have more control over the ui and handle events while a presenter in the mvp is more passive and just presents information through the ui

complicated,form,foo,fields,b,bar,field,reference
however since i m using mvp it have been more complicated than expected because i ll have to have a presenter for form foo with fields a and b then a presenter for bar with with field c and a reference to the presenter of foo so that it can inject the fields a and b into it

pattern,testable,fake,object,unit,tests
also this way mvp pattern becomes more testable as you can mock the view with fake object and test your presenter in unit tests

use,closer,dependency,injection
the use of a presenter is closer to mvp and gets away from the dependency injection model advocated by apple mvc

greater,seperation,knowledge,web
mvp offers greater seperation as your presenter have no knowledge of web centric concepts

