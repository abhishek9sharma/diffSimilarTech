better, simple, else, ---------------------------------------------------

better,generic,null,else
a better way to do that instead is taking in an ienumerable which is more generic than icollection since icollection implements ienumerable and simply checking it for null and else returning any from linq s operators

generic,simple,properties
secondly i did not use ienumerable because it is more generic than icollection and does not even have simple properties like count

others---------------------------------------------------

second,thought,potential,collection
the second way i thought is testing for icollection instead of ienumerable since ienumerable is more of a potential collection than an actual one

valid,candidate,name,impression,user,friendly
icollection also seems like a valid candidate due to its name but i get the impression ienumerable are more user friendly

likely,possibility,collection
even though this is not quite related to the question since google brings you here i thought it might be helpful to notice that a likely possibility is that your are using ienumerable for you collection you should be using icollection see more here

