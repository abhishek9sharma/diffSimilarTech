others---------------------------------------------------

architecture,faster,time,branch,hardware,implementations
and depending on the architecture you re implementing this on it might be faster - the multiplying might take less time than the branch in the modulo or for hardware implementations might well take the same time

integer,expensive,divide
also integer multiplying is less expensive so you may just do the divide first and calculate the modulo 10

base,number,greater,cycle
more generally you can always just try multiplying the base by itself a number of times no greater than the modulo and you are bound to find a cycle

harder,time
is much harder than multiplying by 5 3 and 2 and taking the modulo in between each time

particular,chunk,divide,amount,time
but my guess would be that in this particular chunk of code multiplying divide and modulo all take roughly the same amount of time and that time is greater than add or subtract

convenient,matrix,number,power,individual,entries
if you have the choice modulo is probably more convenient basically you take your matrix modulo a number m after each power or multiplying and the individual entries of the matrix will never grow beyond m - 1 2 but obviously the result will be an algorithm for modular exponentiation thus different from what you have now

