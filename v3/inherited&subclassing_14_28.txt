class, better, composition, ---------------------------------------------------

custom,resource,better,wrapper,composition
depending on how your application is structured this means you may want to have your own base class implementing iresource which creates your custom not found resource for all of its subclassing or better make a wrapper since composition is better than inherited

class,valuable,composition
perhaps the class should be decomposed in other classes or subclassing if in your case inherited is more valuable than composition so every class has a well defined responsibility in the system

ireadwrite,implements,class,base
since ireadwrite implements ireadonly ireadwrite is said to be a subclassing of ireadonly although subclassing is more accurately used to describe a class which inherited a base class rather then implements an interface--for the sake of simplicity they are very nearly the same concept

parent,class,better,nested,superclass
if i have a bunch of fields in a parent class that all need to be inherited by subclassing is it better to have the subclassing nested in the superclass make the fields protected rather than private or use protected accessor

information,standard,constructors,tree,parameters,class
if a subclassing needs more information than the standard parameters which came up for us you have the option of a second parameters class type that you use as a second parameter but then you have two types of constructors in the tree or using inherited in the parameters class hierarchy

trickier,private,members,class,public
with subclassing is trickier because any private members of a class are not inherited by the subclassing but protected and public are

views,better,level,ancestor,base
creating the views with code only i think one is better off with subclassing if it comes to more than one level of inherited or many ancestor classes for just one base view

method, data, object, ---------------------------------------------------

tostring,method,object,meaningful,output
the tostring method is inherited from object but can be overridden in a subclassing to get more meaningful output

useful,new,method,data
inherited is more useful when a new subclassing wants to change the way a method works if you just need to change the data the class uses to work probably an approach like this would do the trick

visibility, can, straight, ---------------------------------------------------

superclass,cannot,lower,visibility
still you cannot inherited from a as superclass cannot have a lower visibility than subclassing

straight,wider,visibility,members
i don t see any straight way to restrict subclassing from choosing a wider visibility for inherited members

methods,superclass,order
similarly as the subclassing gains more methods it inherited the list of superclass in the order in which they were named that precede it

behavior, re-use, serious, ---------------------------------------------------

behavior,group,serious,re-use,functions,properties
i generally use interfaces are too enforce a common behavior that a group of classes share whereas subclassing is more appropriately used in cases where you can achieve serious code re-use through inherited functions properties

stock,cocoa,custom,methods,category,superclass,behavior
usually i subclassing the stock cocoa classes customize to my needs and if i need custom methods in more than one subclassing i will declare a category on the superclass rather than relying on inherited to provide my custom behavior

others---------------------------------------------------

longer,instance
this breaks the inherited and the subclassing is no longer an instance of the superclass

large,numbers,instances,prototypical,better
if you are dealing with large numbers of subclassing instances prototypical inherited may serve you better

example,looser,model,languages,set,behaviours
this example is a bit looser than the inherited model provided by languages such as java -- an animal instance can have any behaviour at all rather than one of a specific set of behaviours depending on its subclassing

hibernate,support,mapping,powerful,hierarchy,table,strategies
but native hibernate support regarding inherited mapping is more powerful than standard jpa and single table per class hierarchy or table per subclassing mapping strategies are more suitable for polymorphic queries and associations than table per concrete class strategy

single,table,attributes,information
with single table inherited one table must have all the attributes that any of the subclassing need more information

little,confused,extension,parent,class,pretend,specific,version
it seems like you re a little confused about what a subclassing and by extension inherited symbolizes instead of thinking that a subclassing belongs to its parent class pretend that a subclassing is a more specific version of its parent class

er,modelling,superclass,multiple
in enhanced er modelling subclassing inheriting from more than 1 superclass is called multiple inherited

likely,contractual,nature,abstract
with inherited this is less likely to happen due the contractual nature of subclassing abstract classes

sound,thread,behaviour,favor,composition
it s conceptually more sound as subclassing a thread suggests specializing its behaviour while runnable s are more like task containers - favor composition over inherited

delegate,easier,functionality
although this problem sort of yells delegate it s much easier with subclassing since you intend to inherited almost all the same functionality

tree,__slots__,__dict__
for classes in an inherited tree that defines __slots__ subclassing will have a __dict__ unless they

simplefactory,final,flexibility,factory,method,composition
since simplefactory is not final you can definitely subclassing it gaining more flexibility than with a factory method because simplefactory replaces inherited with composition

approach,specialized,respective
if you are going for an inherited approach you should keep in mind that subclassing should be more specialized than their respective superclass

virtual,table,abstract,api,vtable,pointers,start,bigger
there is one careful gotcha if you add an overload to ifoo of a method not an override an overload the order of the virtual methods changes and if you add a new virtual parent the layout of the virtual table can change and this only works reliably if all inherited to your abstract classes is virtual in your public api with virtual inherited the vtable has pointers to the start of each vtable of the subclassing so each subclassing can have a bigger vtable without messing up the address other functions virtual functions

