non-positive, weights, approach, ---------------------------------------------------

non-positive,weights,algorithm,better
however if g is guaranteed to have only non-negative weights g is non-positive weights then dijkstra s algorithm could be better choice over bellman-ford

situation,approach,better
surely there is some situation in which the bellman-ford approach is better than the dijkstra approach

circumstances,algorithm,better
but under what circumstances is the bellman-ford algorithm better than the dijkstra algorithm

others---------------------------------------------------

nodes,node,bit,faster
if you want to have all all shortest paths from all nodes to all other nodes you can just run dijkstra from each node or you can try bellman-ford which is bit faster but a little bit harder to grasp

googling,sources,algorithm,efficient
after a lot of googling i ve found that most sources say that the dijkstra algorithm is more efficient than the bellman-ford algorithm

proper,implementation,faster,use,negative,weight
since a proper implementation of dijkstra is faster than bellman-ford use dijkstra unless there are negative weight edges in the graph

slower,negative,edge-weights
bellman-ford as suggested in your question tends to be slower than either dijkstra s or a - it is primarily used when there are negative edge-weights which there are not here

fair,similar,use,iterative
in fact i think it is fair to say that bellman-ford is more similar to dijkstra because of its use of iterative relaxation

shortest,path,mn,time,slower
the only issue with applying that technique for the single source shortest path problem is that reweighting with bellman-ford takes o mn time which is slower than dijkstra s o m log n

