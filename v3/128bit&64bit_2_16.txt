solution, previous, comment, ---------------------------------------------------

previous,comment,number,prime,factor,larger
and i ll just add to previous comment if 128bit number has prime factor larger than 64bit then it certainly has a factor less than 64bit

number,prime,factor,larger,solution
i ll just add that if the 128bit number is prime or has a prime factor larger than 64bit then there will be no solution to your problem

others---------------------------------------------------

precision,double,low,decimal
i wrote this brute-force converter but your values don t seem to exactly match up with .net type precision - double 64bit is too low precision and decimal 128bit is more

adder,slower
so a 128bit adder will be slower than a 64bit add

process,data,big,powers,application,particular
excel cannot process data more than 64bit big it will store it in powers of 10 but in our application i want 128bit data for that i have formatted particular cell to be text format in excel sheet so that i can enter very big number

2x,improvement,scalar,bit,simd,typical
so it looks like the simd implementations give a 2x or more improvement over 64bit scalar code although 256 bit simd doesn t seem to give any improvement over 128bit simd and that typical throughput should be a lot faster than 5 gb s

version,supports,numbers,__uint128_t,multiply,upper,likely,efficient
if you re using gcc and the version you have supports 128bit numbers try using __uint128_t than performing the 128 multiply and extracting the upper 64bit is likely to be the most efficient way of getting the result

transactions,faster,bit
128bit transactions tend to be faster than 64bit which tend to be faster than 32 bit

years,architecture,math,faster,today
in a few more years there might be an architecture where 128bit math is faster than 64bit but i don t think any exists today

sizes,larger,aes,uses,blocks
pkcs#5 padding technically is not defined for block sizes larger than 64bit aes uses 128bit blocks

instructions,sse2,wide,double,float,faster,native,width,data
some wider instructions like sse2 128bit wide or double float 64bit wide are faster or sometimes will not work for alignment of native width if you need to load 128bit data you should align it in 128bit

benchmark,test,intrinsic,function,faster
in a benchmark test the 128bit intrinsic function performs faster than the 64bit intrinsic

set,vectors,vectory,time
so make sure you code has a working set of less than 16 128bit vectors or 32 64bit vectory at any time

distributed-system,internet-wide,pointers,system,call
perhaps 128bit distributed-system internet-wide pointers but no more than 64bit in a system call or perhaps even a legacy 32-bit limit

__uint128_t,types,platforms,support,integers,common
gcc supports built-in __int128_t and __uint128_t types on 64bit platforms but it looks like formatting support for 128bit integers is less common in libc

emulated,integers,slower,hardware,integers.,specific
the emulated 128bit integers are slower than the hardware 64bit integers. specific changes

