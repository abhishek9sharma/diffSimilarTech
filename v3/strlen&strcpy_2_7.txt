convenient, identical, result, ---------------------------------------------------

strdup,malloc,memcpy,faster
because of the above replace strdup with strlen malloc memcpy memcpy is slightly faster than strcpy

strdup,convenient,malloc,identical,result
additionally if you have strdup then it is much more convenient than strlen + malloc + strcpy with identical result including the same obligation to free the allocated storage when you no longer need it

others---------------------------------------------------

slower,faster
it s hard to guess whether this will really be slower or faster than using strcpy followed by strlen though

incoming,dataa,header,shorter,connected
strcpy incoming connected will overwrite dataa and maybe datab if your first token pointed to by header is shorter than strlen connected

char,null,character
you must allocate one char more than the strlen for the terminating null character which will also be copied with strcpy

matter,initial,strncpy,safety,difference,memcpy,worth
but for the example you give it doesn t matter - if it s going to fail it will be in the initial strlen so strncpy doesn t buy you anything in terms of safety and presumbly strncpy is slower as it has to both check bounds and for nul and any difference between memcpy and strcpy isn t worth changing code for speculatively

byte,returns,string
if strcpy is anything like strcpy it will write one byte more than strlen returns to zero terminate the string

