better, combo, zeros, ---------------------------------------------------

calloc,better,+
it takes a page off of the free_page_list updates mem_map zeroes the page and returns the physical address of the page. here s another post that explains it well and also explains why using calloc is better than malloc + memset

slower,calloc
malloc + memset is slower than calloc under certain conditions

zeros,faster,combo
it s conceivable that calloc could return address of memory location that is already pre-initialized with zeros thus it may be faster than malloc + memset combo

calloc,efficient
one reason to use calloc over malloc plus memset is that calloc may be more efficient

closer,calloc
actually calling memset after malloc is closer to calling calloc than the option you suggest

efficient,large,allocations
it will be presumably more efficient than malloc + memset for large allocations

calloc,faster,zeroed
this means calloc can potentially be faster than calling malloc followed by memset since it can skip the memset if it knows it will already by zeroed

likely,faster,memory
in terms of speed calloc is likely to be faster than malloc + memset if memory needs to be zeroed out

slower,calloc
my question is why is malloc + memset so much slower than calloc

slower,calloc
see also why malloc + memset is slower than calloc

others---------------------------------------------------

request,memory,greater,efficiency,management,misleading,behaviour
it requests memory from the os kernel but the request is not satisfied until the memory is written to with memset . this allows for greater efficiency in the system s memory management but it can result in misleading malloc behaviour

better,clear,entire,zone
after a malloc you ll better clear the entire zone with memset

calloc,faster,mmap,pages,pre-zeroed,forces,allocation
calloc is faster than malloc + memset because calloc knows that the mmap d pages are pre-zeroed and memset forces the allocation of physical ram

