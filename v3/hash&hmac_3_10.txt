sha1, passwords, complex, ---------------------------------------------------

django,passwords,pbkdf2,bcrypt,session,complex,random,salt
in django for example passwords are hash with pbkdf2 or bcrypt but session hash use a less complex hmac and no random salt

better,salt,pbkdf2,detail,safe,broken,function
an hmac is a better way of adding your salt and pbkdf2 is based on hmac - see below for more detail on pbkdf2 - there s a good discussion at when is it safe to use a broken hash function

faster,better,term,security,function,sha1
after looking it s seems that hmac is much faster and better in term of security even if the underlying hash function sha1 is broken which is not the case when using rsa-sha1

others---------------------------------------------------

top,passwords,author,secure,mechanism
because you can guess the top passwords and see if they have the same hash but the author points out that hmac is a more secure mechanism

goal,tamper-evidence,efficient
if your goal is simply tamper-evidence then perhaps a hmac keyed hash may be a more efficient way to go

longer,proper,size
if a key is longer than the hmac supports it ll usually be hash to the proper size

ghash,longer,galios,field,slower,slowest,algorithm,insane
now i can understand that a ghash takes a bit longer than hmac because of the galios field and such but beeing 2 times slower compared to the slowest hash algorithm i know is insane

better,plain,vulnerable,length,extension
hmac is better than a plain hash because it is not vulnerable to hash length extension attacks

platforms,fast,function,available,efficient
in some cases on embedded platforms where a fast hash function may not be available these may be more efficient than hmac

structure,algorithm,susceptible,attacks,properties
the structure of the hmac algorithm makes it less susceptible to attacks on properties of the underlying hash algorithm

