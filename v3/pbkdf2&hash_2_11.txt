slower, aka, functions, ---------------------------------------------------

derivation,bcrypt,aka,rfc2898derivebytes,slower,standard
key derivation algorithms such as bcrypt and pbkdf2 aka rfc2898derivebytes are much slower than standard hash algorithms

derivation,functions,scrypt,bcrypt,sha-1,sha-2
as a side note from what i ve read key derivation functions pbkdf2 scrypt bcrypt are considered better more secure #1 #2 than plain salt sha-1 sha-2 hash by crypto people

others---------------------------------------------------

secure,simple,salt
pbkdf2 is more secure than a simple hash or even a salt hash

bit,byte
just use pbkdf2 to make your hash directly make a 64 bit 8 byte random salt use a higher iteration count 4000-10000

better,salt,hmac,detail,good,discussion,safe,broken,function
an hmac is a better way of adding your salt and pbkdf2 is based on hmac - see below for more detail on pbkdf2 - there s a good discussion at when is it safe to use a broken hash function

techniques,bcrypt,better,plain,resources
key strengthening techniques such as bcrypt or pbkdf2 are generally considered better than plain hash since cracking them requires more resources

applies,function,large,users,password
although because pbkdf2 applies your hash function a large number of times a long salt is less important than in traditional straight hashing applications. for my application i use a 32 byte random salt unique for each users account where i m hashing their password with pbkdf2

membership,provider,resistant,brute
the advantage here is this membership provider uses pbkdf2 to derive the hash which is more resistant to brute force attacks given the number of rounds

django,passwords,bcrypt,session,complex,hmac
in django for example passwords are hash with pbkdf2 or bcrypt but session hash use a less complex hmac and no random salt

key-stretching,algorithm,quicker,sha512,thousands,generation,second
a key-stretching algorithm like pbkdf2 applies a quicker hash like sha512 thousands of times typically causing the hash generation to take 1 5 of a second or so

natural,output,size
i recommend against using pbkdf2 to derive more than the natural output size size of the underlying hash

