operations, implementation, size, ---------------------------------------------------

char,value,smaller,bigger
an unsigned char is an unsigned value which is typically smaller than and is guaranteed not to be bigger than a short

system,int,larger,integer,type,standard,size
on your system unsigned int is apparently larger than uint16_t int is a greater ranked integer type than short in the standard 6.3.1.1 even if they are of the same size

operations,type,narrower,int,values
the rule for performing arithmetic operations in c c++ is that if the type such as short is narrower than int then it gets widened to int if all values can fit or unsigned int otherwise

int,smaller,long,size_t,largest,type,implementation
the only constraints were that int s must be no smaller than short s and long s must be no smaller than int s and size_t must represent the largest unsigned type supported by an implementation

int,numbers,bigger
i used a short int to represent the numbers from -32000 to 32000 also i used unsigned to get bigger numbers

smaller,type,int
but in case short is a smaller type than int it is always converted to signed int regardless of it the short was signed or unsigned

chars, good, memory, ---------------------------------------------------

types,chars,int,bool,data,operation
when integral types like chars short int bool take less number of bytes than int then these data types are automatically promoted to int or unsigned int when an operation is performed on them

sizeof,int,chars,complicated,compiler
this is pretty simple for types sizeof int but unsigned chars short is more complicated and requires compiler specific packing

types,chars,int,versions
that s not so much the case any more now that we have multiple types larger than int but back when c was young the int types were chars short int and unsigned versions of those so all the other types were promoted to int and all code to manipulate anything was done with int s

good,practice,chars,memory,int
or would it be good practice to use an unsigned chars in this case since it allocates less memory than a short int

others---------------------------------------------------

values,ushort,cls-compliant
firstly though we tend to use signed more than unsigned values which would lean us toward short but also ushort is not a cls-compliant type and there s hardly any point introducing an incompatibility with other .net languages in obtaining compatibility with com

branch,unordered,form
branch to target if less than unsigned or unordered short form

