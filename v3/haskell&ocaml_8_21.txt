functional, stuff, little, ---------------------------------------------------

functional,programming,better,best,stuff
overminddl1 if you want to learn functional typed programming something like haskell will teach you better than almost any other language however ocaml will be the best if you want to write to get stuff done

easier,function,functional,little,clunky
ocaml will be easier to learn if you coming from almost any other language this is because haskell is as function as functional languages get and working with mutable random access structures can be a little clunky in haskell

closer,imperative,oo,features,functional,mindbending
ocaml is closer to c++ because of it s imperative and oo features but i recommend you learn haskell as it is more functional more mindbending and has more resources

ml, miranda, alice, ---------------------------------------------------

standard,ml,f#,popular
it loses points for being about standard ml when ocaml f# and haskell are seemingly more popular

ml,miranda,alice
haskell ml ocaml miranda alice oz erlang twelf coq prolog all demonstrate more rigorous applications of mathematics to programming

type, system, holes, ---------------------------------------------------

type,system,holes,agda,coq,better
i ve heard people complaining about haskell s type system having holes and that agda and ocaml coq are better

keith,powerful,type,system,module
keith pointed out that haskell has a more powerful type system but it can also be said that ocaml has a more powerful module system than haskell

others---------------------------------------------------

faster,program
the reason i wanted to investigate this was because both c and ocaml were significantly faster than haskell for this program

higher,level,bindings,llvm,ones,interesting,safety,guarantees,libraries,packages
haskell has higher level bindings to llvm than ocaml the haskell ones provide some interesting type safety guarantees and haskell has by far more libraries to use 1700 packages on making it easier to glue together components

fewer,industrial,users,multicore,support
haskell has fewer industrial users than ocaml and although it does have multicore support it is still being developed in a very unproductive direction

syntax,better,pure,cool
i would just use ocaml but haskell s syntax is so much better than ocaml s and haskell is pure and has cool features such as type classes

ffi,powerful,libraries,avaliable
secondly the haskell ffi is more powerful that is it does more with less code than ocaml s and more libraries are avaliable via hackage so i don t think foreign interfaces will be a deciding factor

zipwith,friendlier,list.map2,lists
the haskell zipwith is friendlier than the ocaml list.map2 which requires the lists to be the same length

momentum,days,parsing,libraries,parser,generator
haskell has more momentum these days but there are plenty of good parsing libraries for ocaml as well including the peg parser generator aurochs menhir and the glr parser generator dypgen

performance,characteristics,intuitive,lazy,evaluation
you will also likely find the performance characteristics of your ocaml code more intuitive than haskell because of haskell s lazy evaluation

familiar,type,constructor
i m more familiar with ocaml than haskell so type constructor may not be the right term

parallelism,threads,parallel,matter,faster,languages,quadcore,shootout,multicore,capabilities
note that it currently does not support true parallelism you won t have two threads running ocaml code in parallel but it doesn t matter as ocaml is much faster than many other languages for example on a quadcore the language shootout shows that ocaml outperforms even haskell with multicore capabilities

curve,lower
as others have pointed out ocaml s learning curve will be lower than haskell s

structures,syntax,nicer,subjective,available,libraries,wins,quantity,availability,graphics,department
if you want only very coarse parallelism at best and you intend to stick with mostly functional structures then pick based on something else like syntax i think haskell is much nicer here but that s subjective or available libraries haskell wins on quantity availability but ocaml might edge it out in the graphics department nonetheless

practical
if i remember correctly they initially experimented with haskell but then decided ocaml was more practical

disclaimer,familiar,things,idiomatic
disclaimer i am more familiar with haskell than ocaml so i may not be doing things in the most idiomatic way

