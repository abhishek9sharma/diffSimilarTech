free, calloc, memory, ---------------------------------------------------

instrument,libc,calloc,things,simpler
if you want to instrument libc s malloc calloc realloc things are even simpler - just wrap them in your allocator functions

worse,free
i m not saying that realloc is worse than implementing realloc using a malloc free

system,tricky,complicated,free
dynamic memory management on an small embedded system is tricky to begin with but realloc is no more complicated than a free and malloc of course that s not what it does

free,harder,thereâ,calloc
malloc free is harder because thereâ s also calloc and realloc

faster,memcpy,free
a realloc can occur significantly faster than a malloc memcpy and free

simpler,quicker,free,calloc,heap
in this context free store is different and incompatible with heap because the new delete free store library is simpler and quicker than the malloc free realloc calloc heap library and thus provides huge memory usage gains to the c++ embedded programmer in a context where you have only 512 bytes of ram

overflow,free,pair,costs,internal,hidden
in the case of overflow a free malloc pair costs less than realloc because of its internal hidden memcpy

memory,free
in c you would use malloc to get memory realloc to get more memory and free to release memory

free,pair,better,need,original
a malloc free pair can be better than a realloc if you don t need to keep around the original memory

array,ints,free,good,faster,new-memcpy-delete
if you work with data that doesn t need construction destruction and requires reallocations a large array of ints then i believe malloc free is a good choice as it gives you realloc which is way faster than new-memcpy-delete it is on my linux box but i guess this may be platform dependent

memory,free,pair
that s why realloc can temporarily require more memory than a malloc free pair

memory,step
you will have to initially use malloc and then use realloc to allocate more memory on each step

use, space, earlier, ---------------------------------------------------

standard,array,size,use,bigger
the standard way to do this is to use malloc to allocate an array of some size and start reading into it and if you run out of array before you run out of characters that is if you don t reach eof before filling up the array pick a bigger size for the array and use realloc to make it bigger

use,bigger,space,pointer1,earlier,stage
now you either use realloc or assign a bigger space to pointer1 with malloc at earlier stage

concern,use,space,heap,person
in the above code i attempt to make a pointer to a dynamic array of structs unsure if i succeeded in that part but my main concern is i use malloc to create space on the heap for the array people. later in the code i create another struct person and use realloc to create more space on the heap for people. i then write to memory outside of what i thought i gave space for by doing people 5 .someone rob

old, pointers, new, ---------------------------------------------------

greater,old,additional,pointers,end,array
if new is greater than old malloc additional pointers on the end of the array instead of trying to realloc them

worse,old,new,pointers,valid
realloc is worse than malloc in that you will need to have the old and new pointers valid during the realloc

initial,data,bigger,new
you could have some initial guess for maxsize 8 and grow when needed your data perhaps by using realloc or just by malloc -ing a bigger new chunk copying the older chunk inside then free -ing that older chunk

others---------------------------------------------------

memcpy,slower,new,memory,data,allocation,address,size
as we can see copying manually with memcpy is always slower than realloc because in this scenario malloc is guaranteed to allocate new memory and you re forced to copy the data in every allocation which shows us that realloc is indeed reusing the same address and enlarging the block size in some cases

datasets,users,program,slows,programs,data
but if it works with large datasets the users will notice that using the malloc -only program slows down other programs much more than the realloc -using program with the same data

memory,stores,special,location,later,time
malloc often gives you more memory that you ask and stores the actual value in a special location that realloc can access at a later time

smarter
i mean i think realloc is way smarter so why do we even need malloc

easier
i know that realloc would be much easier to use but i am trying to do this only using malloc

able,runtime,larger
if you want to be able to change it during runtime you need to declare it dynamically using malloc and make it larger using realloc

justification,faster,2nd,manual,copy
the justification of realloc is that it s faster than 2nd malloc manual copy free

words,document,certain,amount,first,bigger
since i don t know how many words are in a document i m using malloc to assign a certain amount of memory to the array holding all the words at first then using realloc to make it bigger if i ve filled that up

