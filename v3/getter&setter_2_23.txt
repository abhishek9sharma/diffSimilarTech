parameter, value, parameters, ---------------------------------------------------

parameters,value,parameter
or if your getter takes parameters or your setter takes more than a value parameter

argument
if your getter takes more than one argument it s not called a setter anymore

others---------------------------------------------------

fields,switch
i am trying to create one getter for all my fields using a switch case because otherwise i would have to create a lot of setter there are more cases than displayed here

fine,caller,object,unnecessary,difficult
getter are usually fine as the caller can t change the object but unnecessary setter can make it more difficult to reason about an object especially when writing concurrent code

restricted,odd.
but then your setter is less restricted than your getter which is odd.

example,public,entire,property,restricted,access
in the example the getter is still public like the entire property while the setter has a more restricted access here private

complexity,higher,unit-test
the setter complexity can be higher than the getter and thus validate a unit-test

first,anad,expressive,second
the first one setter anad getter can be more expressive than the second one tell don ask

words,nothing,call,getvalue
in other words the getter should contain nothing more than a call to getvalue and the setter should contain nothing more than a call to setvalue

eclipse,simple,complicated
by using jrebel the magic that it does confused eclipse making simple getter and simple setter look more complicated than they originally are

starters,protocols,easy
is this even possible for starters because this is about adding protocols to setter and a getter is much more easy like

possible,geometry,cannot,empty,object
but it doesn t seem possible to roundtrip the geometry as there are less setter than getter the geometry cannot be re-constructed from an empty object just by calling setter

technique,situations
the performance of technique 2 is significantly better than technique 1 in situations where the getter is called much more often than the setter

calculation,expensive,changeable,properties
if the calculation is expensive or the getter is executed more often than the setter for the changeable properties playername by far it can be an optimization to change the property inside the class into a read-write property and set the value every time the changeable properties are changed

issues,method,property,ivar,better
the first file also has some potential issues such as declaring a method that appears to be a getter without declaring a property for the ivar same with the setter would be better to just declare a property

distance,status
what i find strange is that the getter for distance depends on status and the setter acts more like a setter for status

better,example,use,object-returning
setter are a better example but there s a need arising from the use of object-returning getter as well

level,lower,private
you can override the setter s level to be lower than the getter s level with either private set or internal set

special,design,general,type,number,requests,integer
note that the test bean has a very special design as the getter returns a more general type number than the setter requests integer

property,trivial,work
for a unity3d game i m working on i have a situation where i want a read writeable property with a trivial getter but a setter which does some more work

interesting,precedence
the code in the setter is far more interesting than the getter should it not take precedence and be defined first

public,final
a getter without a setter is more like a public final member variable--but at that point why not just use a public final member variable they do no more harm.

accesses,restrictive,likes
it is often useful to have different accesses for the two most often a more restrictive setter than getter and so the likes of

