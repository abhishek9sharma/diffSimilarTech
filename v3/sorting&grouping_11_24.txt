columns, better, int, ---------------------------------------------------

columns,application,simpler,fields
instead knowing that we want to grouping by these columns we can make the application code to do so simpler by sorting by these fields

int,column,better,text,columns
this way only a single int column needs to be sorted grouping which performs much better than sorting two text columns

values, faster, ---------------------------------------------------

faster,values
when not sorting before grouping it is much faster but then i get values from random parts of hour

faster
in my experience hashing is always faster than sorting for joining and for grouping

efficient, linq, order, ---------------------------------------------------

order,necessary,efficient
of course ordering could be forced obj.gettype .tostring and using lexical order but since a strict order is not necessary only grouping i was wondering if there s a more efficient way than sorting

time,efficient
first sort the dataframe by time this should be more efficient than sorting each grouping by time

linq,mechanisms,efficient,loop
does linq use any sorting or other mechanisms to make a grouping join more efficient so it doesn t have to loop through an entire collection for every unmatched item

tables,results,efficient,tmp
alter how i am joining the tables together so that the sorting of the results for the grouping by is more efficient and then hopefully remove the tmp table as well

faster, rest, index, ---------------------------------------------------

groupby,count,faster,sparksql
apparently groupby with count and sorting the grouping was noticeably faster with sparksql

faster,index,rest,query
so i started thinking that sorting would be faster if i created an index on the column that i plan to always sort on even if the rest of my query is missing where grouping by having etc

faster,input,documents
the reason being that sorting less elements which the grouping generally produces is going to be faster than sorting all input documents

others---------------------------------------------------

output,input,common,sublists,dict,sense,groupby
your desired output does not reflect what you have as input if you want to grouping common sublists you can use itertools.groupby considering you want sorted output using a dict and then sorting makes less sense than just creating the grouping from the sorted list using groupby

subselects,faster,queries,myisam,expensive,materialization,overhead
on myisam tables in some cases the subselects tend to be faster than grouping by queries due to the fact that grouping by in myisam is quite expensive due to sorting materialization overhead

contents,able,data,movement,buffer,smaller,lists
when using sorted comparator on the stream before the collect operation the stream has to buffer the entire stream contents to be able to sort it and the sorting may involve much more data movement within that buffer compared to sorting the smaller lists of the grouping afterwards

top,row,max,min,straight
but if you are sorting and only want the top row then a max or min and a grouping be more straight forward

effect,order,first,second,nothing
both have the effect of the order by not being executed at all -- and so not executed after the grouping by in the first case the effect is to remove sorting from the grouping by and in the second the effect is to do nothing more than the grouping by already does

rdd,sort,records
sorting rdd by a key sort within a grouping will have not more than 100 records in that grouping

age,ak,difficult
but then sorting by age grouping ak is more difficult i think

order,clause,optimal,operation,query,execution
if the database is sophisticated enough adding an explicit order by clause will hint that sorting is more optimal for the grouping operation as well as the sorting can then be re-used in the query execution pipeline

frequency,distribution,things,uncommon,instances,count,equal
in some cases where table data was uniquely identifying i used intermediate tables and frequency distribution sorting to eliminate things like uncommon names eliminated instances where a count with grouping by was less than or equal to 2

annotation,legibile,different,parameters
make the excludes annotation more legibile by sorting the different parameters into different grouping

possible,itertools.groupby,performant,defaultdict
grouping is certainly possible with itertools.groupby but that would require sorting making that less performant compared to a defaultdict plus loop solution

looser,constraints,theory,faster,data,unlikely
grouping has looser constraints than sorting so in theory it could be marginally faster than sorting but unless you re dealing with a lot of data you re unlikely to see a speed difference

criteria,checks,field,first,greater
sorting criteria function simply checks if the count field of the first grouping is greater than the other

