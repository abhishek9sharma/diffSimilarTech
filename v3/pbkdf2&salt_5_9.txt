purpose, slower, method, ---------------------------------------------------

bcrypt,longer,purpose,faster,sha-256,sha-512
why do people suggest using key stretching algorithms like bcrypt pbkdf2 which take longer to calculate on purpose rather than using faster algorithms which are also secure like salt sha-256 or sha-512 and using a throttling mechanism to limit brute-force attacks

slower,method,bcrypt
you should add a salt and use a slower hashing method such as pbkdf2 and bcrypt

bit, iteration, byte, ---------------------------------------------------

hash,bit,byte,random,higher,iteration
just use pbkdf2 to make your hash directly make a 64 bit 8 byte random salt use a higher iteration count 4000-10000

passwords,hash,bcrypt,session,hmac,random
in django for example passwords are hash with pbkdf2 or bcrypt but session hash use a less complex hmac and no random salt

others---------------------------------------------------

secure,simple,hash
pbkdf2 is more secure than a simple hash or even a salt hash

derivation,functions,scrypt,bcrypt,#2,plain,sha-1,sha-2
as a side note from what i ve read key derivation functions pbkdf2 scrypt bcrypt are considered better more secure #1 #2 than plain salt sha-1 sha-2 hash by crypto people

applies,hash,number,long,important,traditional,byte,random,unique,users,password
although because pbkdf2 applies your hash function a large number of times a long salt is less important than in traditional straight hashing applications. for my application i use a 32 byte random salt unique for each users account where i m hashing their password with pbkdf2

algorithm,ideal,sha1,fine,better
a randomly salt one way hashing algorithm would be ideal and sha1 and above should be fine though pbkdf2 would be better

opinion,password,longer,secure,use,bcrypt
it should be in my opinion more strongly noted that password hashing with salt is no longer secure and should not be used as others noted use pbkdf2 or bcrypt

