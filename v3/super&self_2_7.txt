better, useful, parent.foo, ---------------------------------------------------

x,better,.__init__,multiple,inheritance
i think a.__init__ self x is better then super .__init__ x because it supports multiple inheritance and i didn t find a way to do it with super

methods,parent.foo,multiple,inheritance,useful
normally you can just call parent class methods directly by doing parent.foo self ... but in case of multiple inheritance super is much more useful

others---------------------------------------------------

-calls,override,x,part,item,type,.mro
unless you have super -calls involved or more generally subclasses that override x and call directly to a.x self as part of their override s implementation looking for the first item in type self .mro that has an x attribute would work --

init,details
you should call init on super and update self more details here

martijn,pieters,.__str__,better
also as stated by martijn pieters using super super .__str__ is better than doing it the way i did deck.__str__ self

queue.dequeue,builtin
as i commented in the code queue.dequeue self can be written more pythonically using the super builtin

correct,class,worse,method,paintevent,event,argument
the second correct class doesn t even seem to inherent since it has no super .__init__ even worse it is setting up a method that is never even called paintevent self event which takes an argument that seemingly comes from nowhere

