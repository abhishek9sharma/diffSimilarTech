former, offer, powerful, ---------------------------------------------------

api,worse,offer,independent,association,objectstatemanager.changerelationshipstate
the problem with dbcontext api is even worse because dbcontext api doesn t offer methods to change state of independent association so you must revert back to objectcontext api and use objectstatemanager.changerelationshipstate

api,easier,approaches,former
dbcontext api is easier to work with than objectcontext but both approaches use the former

pleasant,api
dbcontext is a much more pleasant api than objectcontext

understanding,newer,better,different,api
my understanding is that although dbcontext is newer it s not necessarily better than objectcontext it just provides a different api that might be considered simpler but doesn t that depend on the use case

api,better,older,downgrade
there are many reasons why the dbcontext api is better than the older objectcontext api but in your case it may initially feel like a downgrade

api,easier
besides the dbcontext api is easier to use than objectcontext

newer,api,better,older
dbcontext is newer api which should polish developers experience when using most common tasks - simply the api is better designed but you still have to get objectcontext from dbcontext and use the older api if you want to use some more complex features

feature,api,worse
it is a feature it is about objectcontext api but the same is true or worse with dbcontext api

available,first,api,powerful
entity sql which is not available in code first and dbcontext api - you must access it through objectcontext api is more powerful because it is not dependent on limited functionality offered by linq

common, simpler, development, ---------------------------------------------------

simpler,common,development
dbcontext is much simpler to use than objectcontext and will serve the most common development needs

simpler,common,development
and dbcontext is much simpler to use than objectcontext and will serve the most common development needs

others---------------------------------------------------

models,ways,steps,self,alot,changes,thing,deference,newer,better,things,migrations,method
i used to use dbcontext for all of my db models until i read ways to optimize entity framework after following the steps i found my self forced to switch to objectcontext instead so there were alot of code changes to be done but i am not sure that i doing the right thing specially after googling the deference i ve noticed that dbcontext is newer and better than objectcontext and also i noticed that i lost alot of things while switching to objectcontext like migrations and find method and much more.

things,harder
the problem is that to do so you need to use objectcontext instead of dbcontext which makes things harder

version,easier
from what i have read the dbcontext is a simplified version of the objectcontext and makes it easier to work with

normal,values,powerful,cumbersome
you must either include foreign keys to your entities so they will be tracked as normal values or you must convert your dbcontext to objectcontext and use more powerful and more cumbersome objectstatemanager where you can get instances of objectstateentry for both entities and relations

system.data.sqlclient.sqldatareader,meaning,need
ok - it appears that the objectcontext can translate from system.data.sqlclient.sqldatareader meaning i don t need to derive directly from the dbcontext

instance,databindingprojection,older,versions
assuming that what i see that is missing in your code is for you to pass the new instance of databindingprojection to your dbcontext if using 4.2+ or to the objectcontext if using older versions i would recommend migrating to 5.0

description,related,api,wrapper,issues
the description is related to objectcontext api but dbcontext api is just wrapper suffering same issues actually dbcontext api suffers even more issues in this scenario and because of that i will skip solution with manually setting relationships

entity,removals,slower
when it comes to deletion it even gets worse when saving at the end of all entity removals dbcontext is around 18 times slower than objectcontext

driver,technologies,first,model,base,lighter
you just need to connect using the entity framework driver and if you develop in any of technologies that uses dbcontext includes code first model first and data base first but is lighter than objectcontext you can use the list below

complex
you can try to convert dbcontext to objectcontext and use the more complex api

states,performance,linq,query,better
in 6.7 a graph it shown that states that the performance of a objectcontext linq query is better than dbcontext linq query

changes,end,slower,btw.,large
if adding 2000 entities and saving the changes at the end dbcontext is 3 to 5 times slower than objectcontext btw. i know that adding a large amount of entities would be better using sqlbulkcopy but that s not the point

