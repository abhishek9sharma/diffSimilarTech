tool, different, closer, ---------------------------------------------------

larger,messier,common
if you decide to use a language that s larger and messier than scheme try common lisp

common,approach,conservative
i ve noticed that the common lisp approach is more conservative than the approach scheme has

compact,common
scheme is intentionally more compact than common lisp and you ll find that you can learn the language very quickly

older,common
scheme is older than common lisp

fewer,batteries,common
that said it is a scheme which has fewer batteries included as compared to common lisp

ides,user-friendly,good
i ve also found scheme ides much more user-friendly than lisp s plt scheme is a good one

racket,closer,common,toes,family,speed
racket is closer to scheme than to common lisp but you could dip your toes into the lisp family without the speed bump of the emacs style of development

different,non-scheme,macros,powerful,common,almost-formal
because they use a different non-scheme language scheme macros are less powerful than common lisp macros in the almost-formal sense you can do arbitrary compile-time computation with them but it s hairy and convoluted

fewer,libraries,common
scheme has fewer libraries than common lisp

programming,environment,simpler,better,common
it s popular it s actively developed it has many libraries offering the features of a modern programming environment and scheme is somewhat simpler not to say better just simpler than common lisp

paip,better,common,smallish,chunk
if you want to learn lisp paip is a better choice to start with because it will teach you a lot about common lisp and a smallish chunk of scheme

common,easier,introduction
common lisp of course scheme might be an easier introduction though and easier to get a stable simple common environment

alphanumberics,common,characters
i noted that while in languages like c variable identifiers can only be alphanumberics and underscores common lisp allows many more characters to be used like and at least scheme does

common,separate,namespace,operation,verbose
common lisp has a separate namespace for functions which makes operation like this more verbose than with scheme

good,purpose,simpler,smaller
scheme is also a good language for that purpose and it is simpler smaller than lisp

common,functional,mixed-paradigm,pure
common lisp is a weakly functional mixed-paradigm language and scheme is more strongly functional but still not pure

gambit,smoother,access,libraries,common
however gambit scheme has smoother access to c c++ code libraries which far outnumber common lisp s libraries

advanced,functionality,common
do racket macros have more advanced functionality than those found in scheme or common lisp

older,younger,common,hyperspec
if you are even older and grew up with scheme or are younger and have read the common lisp hyperspec then you might want to write

common,simpler
i suggest that you start with scheme and then move on to common lisp as scheme is simpler

solution,better,common,work
here is a solution in scheme because i know that better than common lisp and have an interpreter for checking my work

haskell,common,clojure,scala
i personally believe that it is not worth the effort because basic is a nearly dead language and there are lots of languages better than basic ocaml haskell common lisp clojure scala scheme go d ...

subjective,common,standard,useful,simple
this is of course subjective but i think learning common lisp or standard scheme is generally more useful just for the simple fact that you then will not be limited to one compiler

complication,harder,better,simpler,lispers,good,tool
for sure it s a complication that makes it harder to explain the language to whoever is learning it and that s why scheme is considered a better simpler language for teaching but many expert lispers think that it s a good choice that makes the lisp language a better tool for real problems

sbcl,fast,simpler,common
i don t see why sbcl should be so fast - scheme is a far simpler language than common lisp

common,uniform,radical,experiments
overall common lisp is much more uniform than scheme and more radical language experiments if done at all are usually embedded as a portable library rather than defining a whole new language dialect

systems, pattern, system, ---------------------------------------------------

suspect,style,macro,systems,common,pattern,matching
i suspect that the reason people write scheme style macro systems in common lisp is more for the pattern matching than for the hygiene

possible,common,macro,system,powerful,syntax-rules
is it possible however to implement common lisp s macro system in scheme which is more powerful than syntax-rules using syntax-case

others---------------------------------------------------

counterexample,programs,faster,memory
for a counterexample i think scheme programs ran faster and used less memory than the lisp programs that preceded them mdash

impression,common,stuff,education,fun
my impression common lisp is more for getting stuff done scheme is more for education and fun

user,friendly
i imagine scheme and perhaps lisp could be made more user friendly by using a different syntax

portability,different,slime,clojure,mit,os-es
i think architecture with sockets was chosen for better portability between different lisp btw slime also supports clojure and mit scheme and os-es slime works on windows too

best,argument,macros,common,ones,complex,top,likely,subtle
that s the best argument i ve seen for scheme macros over common lisp ones if you are building a complex language on top of scheme you are less likely to introduce subtle macro bugs if you stick with the standard macro system

dialects,concepts,rarer,hygienic
most lisp dialects have this concepts in scheme it is rarer since hygienic macros are supposed to reduce its usefulness

single,lexical,environment,older
well scheme has a single lexical environment but older lisp can have more than one lexical environment

paul,graham,easier,defmacro,define-macro,plt
but honestly all the useful macros i ve defined are stolen from paul graham s on lisp and are generally easier to write with defmacro define-macro in plt scheme

series,papers,basis,practical,power,implementations,better,systems,bliss,efficient,conventional,machine
t s purpose is to test the thesis developed by steele and sussman in their series of papers about scheme that scheme may be used as the basis for a practical programming language of exceptional expressive power and that implementations of scheme could perform better than other lisp systems and competitively with implementations of programming languages such as c and bliss which are usually considered to be inherently more efficient than lisp on conventional machine architectures

class,dialect,cleaner,easier,common,opinion,deal
the class uses scheme a dialect of lisp which is significantly cleaner and easier to use than common lisp yes this is an opinion deal with it

development,larger,implementations,portable,systems
both because of the image-based interactive development and because of the larger language lisp implementations are usually less portable across operating systems than scheme implementations are

