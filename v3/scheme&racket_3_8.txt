closer, implementations, functionality, ---------------------------------------------------

macros,advanced,functionality,common,lisp
do racket macros have more advanced functionality than those found in scheme or common lisp

side,macros,advanced,lisp,implementations
on the side of using macros racket has always been more advanced than other scheme and lisp implementations

closer,common,lisp
racket is closer to scheme than to common lisp but you could dip your toes into the lisp family without the speed bump of the emacs style of development

others---------------------------------------------------

languages,rnrs,unused,community,#lang,useful,programs,implementations,different
all of racket s languages can interoperate so your language of choice is up to you though the rnrs languages tend to go unused in the racket community #lang racket is much more useful for writing programs than any of the scheme implementations but they can be useful if you want to write programs that run on different scheme implementations

plt
i would suggest you start with scheme and more specifically with racket formerly plt scheme

oop,integration,dialect,surrounding,culture,chicken,object-oriented,instance
there are various object systems you can load as libraries when you want to do oop but integration with existing code heavily depends on the scheme dialect and its surrounding culture chicken scheme seems to be more object-oriented than racket for instance

implementations,richer,objects,properties,context,source
racket and some other scheme implementations use a richer representation for syntax objects so that they can have properties attached to them indicating in racket at least what context they re bound in what source location they come from what pass of the compiler inserted them and any other information you might want to store cf

mit,strong,interactivitiy,support,plt,static
mit scheme is known for strong interactivitiy support while plt racket feels much more static

