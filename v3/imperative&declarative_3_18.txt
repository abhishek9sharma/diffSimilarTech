simpler, understanding, business, ---------------------------------------------------

programming,false,understanding,abstraction
i ve been teaching myself a bit about declarative vs imperative programming and i ve come to the possibly false understanding that declarative programming is more or less just abstraction

programming,simpler
declarative programming is not always simpler than imperative programming

cleaner,programming,business
i know that declarative way is cleaner but sometimes imperative programming makes your business safer

others---------------------------------------------------

difference,speed,fewer,overheads,modern,compilers,top,bigger,slower
traditionally there was a huge difference in speed imperative has fewer overheads because it s more directly like the computer works but some more modern compilers of declarative code seem to be in the top few of the speed tables a lot of the time - compiled verses interpreted makes a much bigger difference than imperative vs declarative which is why python etc are often slower even though they re imperative

link,comfortable,languages,ones
as a coder sql is my weakest link since i am far more comfortable with imperative languages than declarative ones - but i want to change that

functional,programming,haskell,powerful,abstract,harder
i think that functional declarative programming haskell scheme lisp etc is more powerful and more abstract than imperative programming and therefore is intrinsically harder to learn

json,xaml,languages,better,object,graphs,ones
if xml json and xaml have teached us anything it s that declarative languages are much better suited to create object graphs than imperative ones

approach,better
while neither the declarative nor imperative approach is really better than the other both have their merits

traditional,step,recipe,approach
imperative is the traditional step by step recipe approach while declarative is more this is what i want now you work out how to do it

sql,simpler,faster,pl
declarative sql is usually simpler and faster than imperative pl sql so it s usually best to do most of the work in sql and just glue it together with pl sql

benefit,programming,purpose,finer,control
also one benefit of declarative programming is that purpose is usually more easily understood from reading the code whereas imperative gives you finer control over execution

circumstances,developer,switching,better,solution
now my question is if there s any circumstances that if we use declarative too much it will confuse the developer who read the code and switching back to imperative is a better solution

result,verbose
what i have understood is that declarative let you do whatever you want as long as the result passes and imperative is more verbose

current,time,machine,top,cheaper,faster
while it is possible to explore non-imperative computer concepts it doesn t seem to be worth the effort at the current time - building a declarative machine as an interpreter on top of an imperative machine is much cheaper and faster than a true declarative machine

easier,bug-free
declarative code is easier to make bug-free than imperative code

asp.net,mvc,validation,logic,data,annotations,better
what s bad about this is that when microsoft were designing asp.net mvc they opted for declarative validation logic using data annotations instead of imperative which is much better suited to validation scenarios and can handle just anything

angular,belief,better,uis,components
angular is built around the belief that declarative code is better than imperative when it comes to building uis and wiring software components together.

hive,higher,level,abstraction,pig
we can state that hive is declarative and sit on higher level of abstraction then imperative pig

