script, execution, ps, ---------------------------------------------------

visitor,browser,script,reliable
i am curious to know if detecting the visitor browser with client-side script is more reliable than server-side script

ps,aware,script,secure,execution
ps again i am aware that relying on client-side script is way less secure compared with handling all execution from within the server-side

validation, user, responsive, ---------------------------------------------------

point,validation,important
at this point i m putting off worrying about client-side validation since server-side is more important

validation,secure,user,cannot
server-side validation is more secure than the client-side as the user cannot see the code even he does a view-source

things,critical,validation,malicious
how you handle things server-side is far more critical than client-side validation which can and will be ignored by malicious users

validation,responsive,user,proper,checks
client-side validation is more responsive to the user but always back it up with proper server-side checks

faster, validation, slower, ---------------------------------------------------

merges,faster,error-prone
because merges are performed client-side they are much faster and less error-prone than initiating a server-side merge

side,tradeoffs,validation,slower
since you don t want to repeat yourself it s very tempting to put all your validation on one side or the other but there are tradeoffs either way and it is true that server-side validation is going to be slower than client-side

validation,faster,place
client-side validation is faster than server-side because the validation takes place on client side on browser and the networking time from client to server is saved

data, logic, table, ---------------------------------------------------

processing,table,data,preferable,application
i would advice to switch to server-side processing of table data instead of using client-side it is more preferable if your application works with a lot of rows more than several hundreds

clustering,logic,fewer,data
i think the best way would be for you to write some clustering logic on the server-side and leave the client-side to deal with fewer data points

easier, method, file, ---------------------------------------------------

method,dom,easier,regex
i think this method of manipulating the dom from the client-side is easier than using regex from a server-side language

easier,plug-in,file
this would be easier with server-side php plug-in s unless the file is loaded client-side

focus,easier
maintaining the focus client-side will be much easier than trying to force it through the server-side

easier
but i was working on server-side and probably for client-side it s much easier

others---------------------------------------------------

implementation,flexible,powerful,functionality,server
my guess is that server-side implementation may turn out to be more flexible and more powerful than client-side as i can add functionality to the server easily as long as the client understands it

look,tabletools,source
since eventually i d have a button that runs some script on the smeow values and send it to a different request i had a look at the tabletools plugin but it doesn t really play well with server-side tabletools is more focused on the client-side source

solutions,solution,sense
a lot of the solutions i ve seen are client-side - i think a server-side solution makes more sense for my needs since i can give feedback to the user if the javascript is invalid and only save it on the server once it s clean

simpler,experienced,development
it seems simpler to me because i m more experienced with server-side than client-side development

extent,changes,presentation,layer,result,cleaner,processing
to that extent i had to make a few changes to my server-side presentation layer but as a result i think my client-side code is cleaner and more focused on processing actual user events

binding,grids,better,ones
are client-side binding grids better than the server-side ones

servers,copy,bare,repositories,smaller,non-bare
since servers omit the working copy you should generally expect server-side bare repositories to be smaller than client-side non-bare repositories

nice,small,control,output,reliable
i ve found that rendering client-side is nice for small controlled internal uses but for anything where you want tight control over the output server-side is more reliable

important,google,cpu,cycles,valuable,easier
not all of the reasons given are necessarily valid but one important one is that unless you re google server-side cpu cycles are a lot more valuable than client-side cycles so it s easier to have the client compile optimize what is quite often dynamically generated html javascript rather than the server

redirect,html,nicer
i know i can do a client-side redirect with html but i understand that the server-side redirect is nicer

changes,array,greater,yuge,requests
is there a way to load it in node.js or is there another proxy that can be used to monitor changes in array for server-side code that will work far greater than client-side code as it will be receiving yuge requests

wise,data,faster,first,validation,safety,net
as a general rule of thumb at least in security you should trust no user so i think it would be the wise choice to validate the data client-side it s also faster and then if the first validation passed validate it server-side to double-check or to have a safety net if the user has javascript turned off something you don t see that often

careful,track,difficult,types
so you do have to be careful not to lose track of what code is client-side and what is server-side which is slightly more difficult when both types of code use the same language but is still not very hard

factor,mandatory,languages,slower
using a slow hash with a cost factor is mandatory usually it is done server-side because client-side languages are slower and can do less rounds

console,skulpt.org,plugins,faster,prompt
while not really a console skulpt.org runs python code client-side with no plugins or anything which makes it a lot faster than a server-side prompt

responsive,request-response,performance
client-side will also be more responsive than server-side because there s no request-response but that s really only a perceived performance issue for high-latency connections

access,token,sense,security
finally after figuring out what i needed was a page access token i gave up trying to do this client-side realising server-side makes more sense at least security wise

theory,dangerous
in theory encoding client-side is no more dangerous than encoding server-side

html,hand,life,dash,easier,transformation
now if you aren t generating your html server-side and are instead writing it by hand you can make your life just a dash easier with a client-side transformation like this

info,common,session,cookie
storing that info on the server-side is probably more common with the client-side only given his the session cookie

validations,secure
client-side validations can be overriden hacked thus server-side are more secure

common,answer
that said client-side javascript is much more common and if you were using server-side javascript you would probably know the answer to your question

reliable,browser-independent,approach,amount
the server-side way is more reliable and browser-independent while the client-side approach will decrease the amount of incoming traffic to server

checks,better
server-side checks are better than client-side

selectedindexchanged,event,earlier,change,data
the problem is that the server-side selectedindexchanged event triggers earlier than the client-side change event so the data never reaches the server-side

jspm,front-end,libraries,npm,ones
jspm is more commonly used to bring in client-side front-end libraries and npm for server-side ones

approach,page,input,work
this approach isn t working because you re trying to build the page server-side then expect input client-side then do some more server-side work to build the page

everybody,considerations,sharper,generator,gwt,latter
as most everybody said the client-side considerations are sharper -- unless you want to try a server-side generator of client-side code like gwt i m told the latter works well but personally i m always wary of code generators esp

sync,issue,timer,shorter
if getting these in sync is an issue make the client-side timer shorter than the server-side one

xslt,stylesheet,better,processing,instruction
first vb.net can be used to perform this xslt transformation which is really simple as you said just applying the xslt stylesheet at server-side if it is considered better than at client-side or even just sending the processing instruction for that to the browser

message,transfer,quicker,slower
in this case your server-side and message transfer will be quicker but your client-side will be slower

