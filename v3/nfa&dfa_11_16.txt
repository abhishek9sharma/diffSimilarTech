easier, string, equivalent, ---------------------------------------------------

representations,compact,easier
nfa representations are more compact but dfa s are easier to simulate

representation,easier,equivalent
because representation of a given problem with a nfa is far easier than the equivalent dfa

string,search,easier
stephen string search or a compiled dfa you can construct them from an nfa which is easier to make

easier,slower,state,explicit,disadvantages
i know that dfa s are easier to implement than nfa s and that nfa s are slower to arrive at the accept state than dfa s but are there any other explicit well known advantages disadvantages

easier,paper,valid,string,complicated,epsilon-jumps
though forming the nfa maybe easier on paper checking a valid string against an nfa will be more complicated than verifying one against a dfa due to accounting for epsilon-jumps

states, thing, multiple, ---------------------------------------------------

thing,nodes
only thing is that nfa have more nodes than a dfa

combinations,states,thing
if we express combinations of states in an nfa as states themselves we ve got a dfa with a lot more states than the nfa but which does the same thing

time,states,multiple
with a dfa you spend more time building it and allocating more states whereas with an nfa you spend more time executing it since it can be multiple states at the same time and backtracking can eat your lunch Ã¢ and your cpu

regex, powerful, faster, ---------------------------------------------------

faster,compact
generally speaking dfa is faster but nfa is more compact

slower,powerful,engine
perl uses nfa which is slower yet more powerful than the dfa engine sed has

regex,slower,hand-written,parser
regex is a nfa and is as such in most cases slower than a dfa or hand-written parser

others---------------------------------------------------

better,transition,input
dfa is a better choice over nfa because it has only one transition for an input while nfa can have many

single,state,combination,states,number,equivalent
an information represented by a single state in dfa can be represented by a combination of nfa states hence number of states in nfa are less than their equivalent dfa

better,traditional,expressive,implementations,regexes,word,characters
the net effect is that the backtracking implementations i like that name better than traditional nfa are slightly more expressive than dfa implementations because they can match regexes like which matches three or more word characters repeated twice something that can t be matched by a dfa

transitions,simple,smaller
in fact because you are eliminating the redundancy of epsilon transitions many simple dfa s actually get smaller than the nfa they represent but there is simply no way to guarantee that

larger,means
if it can be practically determinized this give you a dfa that can be exponentially larger than the nfa then by all means do that

