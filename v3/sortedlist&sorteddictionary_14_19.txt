faster, middle, ---------------------------------------------------

faster
if the sortedlist is populated all at once from sorted data it s faster than sorteddictionary

faster
sortedlist is faster than sorteddictionary

faster
if the list is populated all at once from sorted data sortedlist is faster than sorteddictionary

faster,middle
sortedlist is faster when you want to enumerate the elements and you can access the elements by index and sorteddictionary is faster if there are a lot of elements and you want to insert a new element in the middle of the collection

purpose, offers, class, ---------------------------------------------------

purpose,better,class
for your purpose you would probably be better off with a sorteddictionary class or perhaps sortedlist

offers,better,values
sorteddictionary offers same advantages than sortedlist but performs better if values to insert are not already sorted

removal, insertion, operations, ---------------------------------------------------

faster,insertion,removal,operations
sorteddictionary has faster insertion and removal operations for unsorted data o log n as opposed to o n for sortedlist

note,benchmarks,faster,removal,indexing
note after doing some benchmarks i found that sorteddictionary is faster for removal but sortedlist is faster for adding and indexing by key

faster,insertion,removal,operations
sorteddictionary has faster insertion and removal operations for unsorted data o logn as opposed to o n for sortedlist

zmbq,comment,array,faster,insertion,removal,better
as zmbq mentioned in his comment to marc s question the sortedlist is implemented as an array so if faster insertion removal times are needed then the sorteddictionary would be a better choice

memory, ---------------------------------------------------

memory
Ã¢ sortedlist uses less memory than sorteddictionary

memory
sortedlist tkey tvalue uses less memory than sorteddictionary tkey

memory
sortedlist uses less memory than sorteddictionary

others---------------------------------------------------

note,existingholdings,faster,longer
note if you are constantly adding removing items from existingholdings then you could use sorteddictionary which should be faster sortedlist is faster for accessing elements but takes longer adding removing

memory,binary,tree,faster
sortedlist appears to use less memory and is technically a binary tree where sorteddictionary is faster with unsorted data

worse,construction,already-sorted
you should also keep in mind that sortedlist performs worse than sorteddictionary during construction if the items are not inserted in already-sorted order although in this particular case it is highly likely that dates are inserted in chronological sorted order which would be perfect

cost,input,smaller
ignoring the cost of providing sorted input the oh of sortedlist is smaller than the oh of sorteddictionary

index,item,box,easier
i had one further issue that related to the oncollectionchanged - the notifycollectionchangedeventargs required an index as opposed to the item of the sorteddictionary which is doesn t come out of the box it s easier with a sortedlist but anyhow

best,bet,amount,data,better,results
seems the sorteddictionary might be your best bet as searching goes but since you want to search by multiple attributes this drops so if you want a good balance between searching and inserting for that large amount of data maybe a sortedlist will yield better results at the cost of memory usage

