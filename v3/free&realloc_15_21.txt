try, results, allocation, ---------------------------------------------------

libc,allocation,efficient,wont,extra,memory
if you don t mind the libc allocation functions realloc is even more efficient it wont copy the data on a shrink just mark the extra memory as free and if you grow the memory and there is memory free after it will mark the needed memory as used and not copy either

memory,array,try,results
i ve already tried using realloc to reallocate more memory to my array after using free but when i try to do it my results are either a unexpected shut of the execution or a lot of crazy plots..

memory,pointer,redundant,reallocation,result
if i try to use realloc to allocate less memory for a pointer than it initially had allocated will the redundant memory be free or will the reallocation result in a memory leak

numstates,greater,previous,memory,arrays,size
if nfa- numstates is greater than arraysize free previous memory and realloc arrays of size nfa- numstates

better, good, complicated, ---------------------------------------------------

memory,malloc,pair
that s why realloc can temporarily require more memory than a malloc free pair

ints,malloc,good,faster,new-memcpy-delete
if you work with data that doesn t need construction destruction and requires reallocations a large array of ints then i believe malloc free is a good choice as it gives you realloc which is way faster than new-memcpy-delete it is on my linux box but i guess this may be platform dependent

tests,faster,memalloc,memcpy
as you can see from the above tests realloc is consistently faster compared to memalloc memcpy and free

overflow,malloc,pair,costs,internal,hidden
in the case of overflow a free malloc pair costs less than realloc because of its internal hidden memcpy

system,tricky,complicated,malloc
dynamic memory management on an small embedded system is tricky to begin with but realloc is no more complicated than a free and malloc of course that s not what it does

initial,data,malloc,bigger,older,chunk
you could have some initial guess for maxsize 8 and grow when needed your data perhaps by using realloc or just by malloc -ing a bigger new chunk copying the older chunk inside then free -ing that older chunk

malloc,harder,thereâ,calloc
malloc free is harder because thereâ s also calloc and realloc

malloc,memory
in c you would use malloc to get memory realloc to get more memory and free to release memory

faster,malloc,memcpy
a realloc can occur significantly faster than a malloc memcpy and free

malloc,pair,better,need,original
a malloc free pair can be better than a realloc if you don t need to keep around the original memory

worse,malloc
i m not saying that realloc is worse than implementing realloc using a malloc free

others---------------------------------------------------

matrix,use,space,heap,copy,values,older,memory
if you ever need to resize the matrix you will have to either use realloc or ask for more space on the heap copy your values over and free the older memory

justification,faster,2nd,manual,copy
the justification of realloc is that it s faster than 2nd malloc manual copy free

specific,contiguous,blocks,memory,better,new
i know that memory blocks and reallocation are implementation so specific but when there are contiguous free blocks of memory realloc works better than a new buffer allocation and memory copy

important,older,size,bytes,extra,newer
it is important to note that realloc may extend the older block to size bytes may keep the same block and free the extra bytes or may allocate an entirely new block of memory copy the content from the older block to the newer block and then free the older block

function,copynorepeat,bytes,space,v2,double,corruption,fasttop
in implementing the function copynorepeat i can not use realloc to allocate more 4 bytes of space to store a number in v2 this results in double free or corruption fasttop . i wonder why

greater,new,extra,old,end,first,leak,memory
if old is greater than new free the extra old pointers on the end before doing the first realloc so you don t leak memory

