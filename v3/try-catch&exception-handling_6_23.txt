better, output, constructor, ---------------------------------------------------

constructor,better
if you are writing a constructor which could throw an exception-handling you had better make sure you clean up anything you need to by using using or try-catch block

better,output
going beyond that you can use a try-catch block to gracefully handle those exception-handling and provide better output logging options

slower, if-clause, faster, ---------------------------------------------------

slower
try-catch is actually slower if there really is an exception-handling thrown

if-clause,faster
in java you can call option s isempty isdefined and get without any special hassle the really useful option methods such as getorelse are another matter. checking the result of the isdefined method in an if-clause should be faster than checking exception-handling in a try-catch block

others---------------------------------------------------

general,sense,handling,desirable
your colleague may be right in the general sense using try-catch to test your exception-handling handling is less desirable than using the provided expectedexception utilities

application,smaller,relevant
if the application can run even if that exception-handling occurs make the try-catch block wrap a smaller more relevant part of the code and let the buttons initialize

use,clear,imbrications...
or depending on the use case and generally less clear especially if you have more than one exception-handling expected - you don t want to have try-catch imbrications...

rsources,fine,old,better
try-catch rsources is fine for some cases but this is the old way and works better when you have more than 1 exception-handling in a block

project,several,clauses,popup,message,user,friendly
in a project i am creating now i use several try-catch clauses and i would like to display a popup message in case of an exception-handling to make it more user friendly

facebook,requests,facebookapiexception,type,information,errors
also whether this is really the problem or not you can wrap your facebook requests with a try-catch block to catch facebookapiexception type exception-handling to get more information when you have errors

robust,exact,position,info
in general try-catch is more robust does not require you to define an exact position of where to test could be a block and provides info about the exception-handling

anyone,specific,best,robust,error
there s no way anyone else can know anything more specific about your exception-handling than you already do and the best way to investigate is use try-catch and create more robust error handling

part,better,catch,end
when you call input.nextline as part of your exception-handling catching is it better to place it into every catch block or just inside a finally block at the end of the try-catch

rec_catch_exception
when there are more than one exception-handling in try-catch block rec_catch_exception triggers

use,potential,complex,numerous
i use try-catch blocks when the potential exception-handling are more complex or more numerous

nicer,application.run,call
if you really want to catch exception-handling and die slightly nicer you can put a try-catch block around the application.run call and work from there

sometimes,securitymanager,dont
the try-catch is needed because sometimes it will throw a exception-handling if the securitymanager dont allow the thread to sleep but dont worry thats will never happen..

heavier,simple,good,practice,allocation
will hide the exception-handling and since dealing with exception-handling is heavier compared to a simple if t why isn t the normal new t not considered less good practice considering we will have to use try-catch to check if a simple allocation succeeded and if we don t just watch the program die

info
wrap your code in try-catch to get more info on the exception-handling

unchecked,better,order,ugly,clause,method
so here the unchecked exception-handling is better to use in order not to copy and paste all that ugly try-catch block rethrowing an exception-handling and add the throws clause to the method

nested,traditional,resource
additionally you may have to write nested try-catch blocks more frequently if you are using traditional try-catch . closing a resource also throws an exception-handling

raiseweberror,next,futher,call
if raiseweberror re-throws the exception-handling this will then be handled by the next try-catch block found futher up the call stack the parent method you refer to

different,stuff
if it s not the case then i believe it is much better to isolate the different code blocks throwing different exception-handling into different try-catch blocks sandwitching do more stuff here that does not throw exception-handling

