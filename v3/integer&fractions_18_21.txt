conversion, lower, glfixed, ---------------------------------------------------

bits,glfixed,part,lower
that means that the 16 upper bits of a glfixed represents the integer part and the fractions is the lower 16 bits divided by 65536

text,size,part,bigger
the label s text size of an integer part is bigger than text size of a fractions part

extract,part,exact,calculations
so my problem is how could i extract the fractions part from 254.73 so that i can get exact 73 as integer to do more calculations

data,errors,overflow,bigger,value
another example is geometry classes one parametrized to work with 64bit floats another parametrized to work with 64bit integers passing data between them may result both in rounding errors integer can t represent fractions and overflow integer has bigger value range than same-sized float

decimal,lower,order,time,part
if a decimal fractions is included lower order time elements if any shall be omitted and the decimal fractions shall be divided from the integer part by the decimal sign specified in iso 31-0 the comma or full stop .

digit,division,part,fewer,extra
if you divide a 15 digit number by 3 you lose one digit because the division may not make the integer part have fewer digits and it demands an extra digit for the fractions part

trys,number,part
those approach that you are using trys to make a number integer if a fractions part is less than 1e-6 0.000001

part
when you then calculate the integer part is 1 less that you might expect while the fractions part is slightly less than one

part,greater,conversion,higher,original
if fractions part was greater than 0.5 adding 0.5 to it will increase the integer part and after conversion we get 1 higher of the original integer part rounding up

use,bcpow,part,bc_exp,get-go,smaller
than use bcpow on the integer part and bc_exp on the fractions part which now converges from the get-go since the fractions part is smaller than 1

part,conversion
so if the fractions part was less than 0.5 adding 0.5 will not increase the integer part and so after conversion the integer part will be the same rounding down

larger, format, type, ---------------------------------------------------

bits,mantissa,larger,number,type,precision
if the number of bits in the mantissa or fractions is larger than the number of bits in your integer type then you ll possibly lose precision when someone types in a number such as

bits,part,bigger,hard,data-type,non,trouble
i know there are not that many mantissa bits for fractions part for bigger numbers but you did not specify which floating data-type you are using if 32 64 80 128 256 bits or more so hard to say and if the integer part is bigger then your integral data-type used to cut off the non fractions part then you would be in trouble with f-long f

format,23-bits,int,type,bits,larger,float
therefore ieee 754 single precision floating-point format has 23-bits fractions and int type has 32 bits so if the integer is larger than 2 24-1 the float type can t represent it exactly

format,n-bit,larger,n+1
a floating-point format with a n-bit fractions can t represent the integer which is larger than 2 n+1 -1 because it will lose the precision

result, multiplication, math, ---------------------------------------------------

math,multiplication,faster,division
the reason i used it is because integer math and multiplication are faster than fractions math and division

result,multiplication,numbers,binary
the result of the multiplication is slightly less than an integer because the numbers are internally stored in binary and you can t represent most fractions numbers exactly in binary for the same reason 1 3 can t be written exactly in decimal with a finite number of digits after the decimal point

exponents,difficult,result,portion,power
fractions exponents are considerably more difficult since it means essentially calculating an nth-root of the base where and multiplying the result by the result of the integer portion power calculation

others---------------------------------------------------

limited,float,bigger,results,sense
as python integer is less limited than the float you may get bigger results with the fractions if it makes sense at all

numbers,digits
if your numbers have no more than n fractions digits and can be scaled to integer you can multiply by 10 n and operate with integer instead

someone,numbers,values,clearer
but for someone who doesn t even know what an integer is numbers without fractions values is probably clearer

