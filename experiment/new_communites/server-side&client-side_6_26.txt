script, visitor, browser, ---------------------------------------------------

visitor,browser,script,reliable
i am curious to know if detecting the visitor browser with client-side script is more reliable than server-side script

ps,aware,script,secure,execution
ps again i am aware that relying on client-side script is way less secure compared with handling all execution from within the server-side

user, responsive, proper, ---------------------------------------------------

validation,responsive,user,proper,checks
client-side validation is more responsive to the user but always back it up with proper server-side checks

validation,secure,user,cannot
server-side validation is more secure than the client-side as the user cannot see the code even he does a view-source

side, tradeoffs, slower, ---------------------------------------------------

side,tradeoffs,validation,slower
since you don t want to repeat yourself it s very tempting to put all your validation on one side or the other but there are tradeoffs either way and it is true that server-side validation is going to be slower than client-side

validation,faster,place
client-side validation is faster than server-side because the validation takes place on client side on browser and the networking time from client to server is saved

other---------------------------------------------------

wise,data,faster,first,validation,safety,net
as a general rule of thumb at least in security you should trust no user so i think it would be the wise choice to validate the data client-side it s also faster and then if the first validation passed validate it server-side to double-check or to have a safety net if the user has javascript turned off something you don t see that often

changes,array,greater,yuge,requests
is there a way to load it in node.js or is there another proxy that can be used to monitor changes in array for server-side code that will work far greater than client-side code as it will be receiving yuge requests

reliable,browser-independent,approach,amount
the server-side way is more reliable and browser-independent while the client-side approach will decrease the amount of incoming traffic to server

console,skulpt.org,plugins,faster,prompt
while not really a console skulpt.org runs python code client-side with no plugins or anything which makes it a lot faster than a server-side prompt

implementation,flexible,powerful,functionality,server
my guess is that server-side implementation may turn out to be more flexible and more powerful than client-side as i can add functionality to the server easily as long as the client understands it

xslt,stylesheet,better,processing,instruction
first vb.net can be used to perform this xslt transformation which is really simple as you said just applying the xslt stylesheet at server-side if it is considered better than at client-side or even just sending the processing instruction for that to the browser

common,answer
that said client-side javascript is much more common and if you were using server-side javascript you would probably know the answer to your question

sync,issue,timer,shorter
if getting these in sync is an issue make the client-side timer shorter than the server-side one

things,critical,validation,malicious
how you handle things server-side is far more critical than client-side validation which can and will be ignored by malicious users

selectedindexchanged,event,earlier,change,data
the problem is that the server-side selectedindexchanged event triggers earlier than the client-side change event so the data never reaches the server-side

checks,better
server-side checks are better than client-side

method,dom,easier,regex
i think this method of manipulating the dom from the client-side is easier than using regex from a server-side language

binding,grids,better,ones
are client-side binding grids better than the server-side ones

info,common,session,cookie
storing that info on the server-side is probably more common with the client-side only given his the session cookie

responsive,request-response,performance
client-side will also be more responsive than server-side because there s no request-response but that s really only a perceived performance issue for high-latency connections

html,hand,life,dash,easier,transformation
now if you aren t generating your html server-side and are instead writing it by hand you can make your life just a dash easier with a client-side transformation like this

important,google,cpu,cycles,valuable,easier
not all of the reasons given are necessarily valid but one important one is that unless you re google server-side cpu cycles are a lot more valuable than client-side cycles so it s easier to have the client compile optimize what is quite often dynamically generated html javascript rather than the server

theory,dangerous
in theory encoding client-side is no more dangerous than encoding server-side

look,tabletools,source
since eventually i d have a button that runs some script on the smeow values and send it to a different request i had a look at the tabletools plugin but it doesn t really play well with server-side tabletools is more focused on the client-side source

servers,copy,bare,repositories,smaller,non-bare
since servers omit the working copy you should generally expect server-side bare repositories to be smaller than client-side non-bare repositories

