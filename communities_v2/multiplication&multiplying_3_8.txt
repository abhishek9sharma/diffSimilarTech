0---------------------------------------------------

number,power,operation,faster
mathematically left shifting is the same as multiplying a number by a power of 2 but as the operation is done only by shifting it is much faster than doing multiplication

mistake,number,compiler,optimization,longer
if i make a mistake and multiplying a number by 1.0 instead of 1 and i do not use any compiler optimization then my multiplication will last much longer than multiplying a number by 1

other---------------------------------------------------

harder,numbers,divide
multiplication is slightly harder just multiplying two scaled numbers and then divide by your scale factor

first,simpler,integer,result,overflow
multiplying first is probably simpler than using floating point if you only want an integer result and if you know that the multiplication will never overflow

easier,tasks,block,number
multiplication is the easier of the tasks just remember to multiplying each block of one number with the other and carry the zeros

complex,integer,scale,scaleback
multiplication is slightly more complex as it needs an integer multiplying followed by a scale back such as 0.72 2 becomes 72 200 becomes 14400 becomes 144 scaleback becomes 1.44

matrix,easier,several,implementations,method,packages
matrix multiplication is the easier one there are several matrix implementations with a multiplying method in packages org.apache.spark.mllib.linalg and org.apache.spark.mllib.linalg.distributed

easier,shl,operation,operand
implementing multiplication is easier if you remember an shl operation performs the same operation as multiplying the specified operand by two

