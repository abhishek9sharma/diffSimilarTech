other---------------------------------------------------

integer,better,first,divide
while working with integer division it s better to multiplying first and divide later to minimize the rounding error

pemdas,precedence
i read about python following pemdas that is precedence of multiplying is more than division

jit,performance,critical,code,slower
sure that s probably compiled or jit d away but you should avoid division in performance critical code it s far slower than multiplying

note,dshin,faster,performance,improvement
note that i ve incorporated dshin s comment that multiplying is faster than division however the performance improvement is about 90 removing the binary search 10 multiplication vs

single,fp,slower,op
according to agner s instruction tables a single fp division is slower than a single reciprocal op and a single multiplying op

left-shift,divinding,shift,faster,operation
these can be compared to multiplying by 2 x left-shift or divinding by 2 x right-shift but it should be noted that a binary shift is much faster than a division operation

slower,decimal,number
i presume that you know that using a division is a lot slower than multiplying by decimal number 5 is always slower than 0.2

accurate,reciprocal
perhaps it s the case that division is much more accurate than reciprocal plus multiplying

height,tree,total,time,better,part
but in normal case it takes n 2 comparison so you half the height of tree but you multiplying each merge with two so total running time is not better than division to 2 part

digit,concise,larger,factors,efficient,result
but determining the digit and the carry by division is much more concise and for the larger factors also much more efficient when multiplying a digit by 100 the result is on average 450 requiring 45 subtractions but two divisions are sufficient for all factors

quaternion,b,nothing,multiplicative,inverse
division of quaternion a by quaternion b is nothing more than multiplying a by the multiplicative inverse of b

