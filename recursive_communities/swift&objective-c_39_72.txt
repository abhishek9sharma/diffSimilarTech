class, easier, method, ---------------------------------------------------

parent,class,property--this,better,approach
swift also prevents us i believe from overriding a parent class s property but also still lets us observe changes to that property--this is much better than objective-c s approach

month,fun,easier
early this month i started learning swift as i found it fun and easier than objective-c

method,cleaner,init,methods
usually i find swift s method naming to be cleaner than objective-c s but init methods can be an exception

xcode,free,easier
download xcode free and learn objective-c or swift swift is easier to learn than objective-c

smarter,singleton,class
swift is lot smarter than objective-c about singleton class

singleton,class,easier
as you can see defining a singleton class in swift is much easier than in objective-c

hand,easier,background,time
on the other hand swift is easier to learn especially if you have objective-c background so it can be adopted during the time slowly and paralelly with using objective-c

static,method,class,foundation
we ve seen that swift uses a more static method dispatch than objective-c which unless a class dervices from foundation nsobject prevents the style of swizzling based on remapping method implementations at runtime

free,easy,compilation,checks
objective-c is much more free and easy with types and compilation checks where swift isn t

faster, slower, compiler, ---------------------------------------------------

simple,conclusions,faster
bottom line i would personally hesitate to draw any simple conclusions of swift is faster than objective-c or vice versa

craig,announcement,faster
as craig revealed within the announcement of swift it is said to be faster than objective-c by far

compiler,imports,things
swift s compiler is also doing a lot more than objective-c s compiler considering swift is more strongly typed and does not required specifying imports among other things

processing,compiler,faster
most importantly for your image processing app the compiler will optimize swift code to run faster than objective-c

view,faster,performance,slower
my view is that if in some cases objective-c is faster than swift it doesn t mean that all over performance of swift is slower

ridiculous,apple,faster,low,level
the perf hit will be ridiculous i know apple say swift execute faster than objective-c but this is low level so it will be harmless

tests,certainty,faster,slower
i don t think that as of today you can run these tests and determine with any certainty whether swift 1.0 is faster or slower than objective-c

multiple,slower
there are multiple reasons why the swift code is slower than the objective-c code

apple,faster
and also apple does might not confidently announce that swift is more faster than objective-c in all the cases

compiler,newer,unlikely
the swift compiler is doing a lot more and is quite a bit newer than the objective-c compiler so it unlikely it will be as stable fast for quite some time

possible,faster,pure,things
it is possible for swift to be faster than pure objective-c in things that you would traditionally use c or c++ for anyway

slower,top
wouldn t swift be slower than objective-c in this case since it is layered on top of it

slower,implementation
the swift one is dramatically slower then objective-c implementation

familiar, life, figure, ---------------------------------------------------

familiar,life,figure
i m learning swift and much less familiar with objective-c but for the life of me i can t figure out how they are trying to achieve the goal stated as build list of encodings sorted and including only those with human readable names.

apps,unfamiliar,familiar
this article seems to suggest that this is possible by swizzling a fake location into apple s cllocationmanager class to be used by other apps but i am unfamiliar with the objective-c code more familiar with swift

better, safer, safe, ---------------------------------------------------

better
so i ve started learning swift because it looks way better than objective-c

better
better if you have a code swift is better but is not problem objective-c

safer,safe
swift in that case would not be safer but less safe than objective-c

easier
swift is neither easier to read nor understand than objective-c

readable, print, ---------------------------------------------------

print,readable
objective-c print is more readable compared to swift

readable
with swift the code is much more readable than with objective-c

use, ---------------------------------------------------

use
i use objective-c more than swift

use
also note that i use objective-c more than swift

application, executable, size, ---------------------------------------------------

executable,size,application,bigger
executable size of swift application is much bigger than size of objective-c application

application,harder,possible
injecting code in a swift application is harder than it was for an objective-c application but it s still possible

application,fine,comfortable,unit
i have a objective-c application working fine and smooth to be more comfortable with swift i decided to write the unit tests for this app in swift

applications, older, programming, ---------------------------------------------------

older,programming,macos,applications,structs
as objective-c is the older programming language for ios or macos applications swift allows you to use those classes structs in your code

professional,work,enterprise,applications
writing swift 2.0 in my professional work my personal opinion is that it s indeed ready for enterprise applications -- maybe even more than objective-c ever were

syntax, successor, new, ---------------------------------------------------

successor,comfortable,syntax
however i read that swift was the successor of objective-c and i would feel more comfortable with swift syntax

new,syntax,wise
im new to swift but i like it more than objective-c as it looks a bit like java does to me from syntax wise compared to objective-c

other---------------------------------------------------

stricter,initialisers
furthermore swift is stricter than objective-c when it comes to initialisers

stricter,runtime,type,correctness,duck,typing
swift is stricter about runtime type correctness than objective-c so duck typing alone is not enough

legal,procedural,style
personally i prefer objective-c because you can use c very easily as anything that is legal in c is also legal in objective-c added to which swift is a more procedural in style where objective-c is quite clearly object orientated

example,complex,error,prone
as you can see the swift example is more complex and error prone than your objective-c code

switch,methods,longer,visible
however when i switch to swift 4.0 the methods declared in swift is no longer visible in objective-c

better,aspects,major,dynamic,libraries,older,version
i feel swift is better than objective-c in many aspects but my major question is - will swift dynamic libraries support older version of swift

lightweight,generics,api,easier,interface
adding lightweight generics to your objective-c api makes it easier to interface with swift because your api gets translated more precisely


swift is more strictly typed than objective-c

possible
specifically it makes it possible to write objective-c code that plays nicely with swift which is more strongly typed than objective-c

buggy,heck,ill,bet,worse,benefits,couple,years,equal,greater,basic,simplicity
i know that swift is buggy as heck i run into bugs everyday but ill bet objective-c was even worse when it started out benefits of hindsight so in a couple of years swift will be equal or greater than objective-c keeping its basic simplicity as well


i also use objective-c more than swift but here s what my guess is as to what the objective-c code would come to

bundles,mb,larger,counterparts
you will notice that swift bundles are always about 4-5 mb larger than their objective-c counterparts and this is precisely why

difference,better,optimisation
if you get a difference between swift and objective-c it s more because swift is probably better on optimisation

-documentary,content,documentary
objective-c -documentary provides more content than the documentary for swift

optional,type,safer,nil
apple seems to claim that the optional type in swift is safer than nil in objective-c but i don t understand why this is so

robust,modern,stronger,typing
swift won t allow you to do absolutely everything that objective-c does but it will allow you to do almost everything and the code will be probably more robust considering that swift is more modern language with stronger typing than objective-c

order,correct,type-safe,possibility,unrecognized
so it should have always been gkagent under objective-c in order to be strictly correct however objective-c is less type-safe than swift so you could get away with it with the possibility that you d get an unrecognized selector exception if a gkagent object was ever passed to the delegate method and you assumed it was a gkagent2d

designers,trouble,constraints,wish
the swift designers went through a lot of trouble to make sure that it s more than just objective-c without the constraints of c in fact i almost wish they hadn t said that since it s so often misquoted

related,articles,effective
after reading some related articles i don t think swift is more effective than objective-c

clearer,versions,releases,related,information
swift is clearer on versions releases and i keep asking myself if i am missing something related to objective-c since i can t find this information

dynamic,stuffs
swift seems to be less dynamic than objective-c in these stuffs

secure
one of the reasons we want to move is because swift is more secure than objective-c

attributes,understandable,complier,rule
those attributes let you create objective-c code which is more understandable by swift and complier warn you when you break the rule for example

simpler,beginners,months,complicated,better
it seems to me that swift would be way simpler to learn then objective-c for beginners i know because i learned it in like 2 months and swift is less complicated and better laid out then objective-c

nicer,core,audio
i find that objective-c is much nicer for working with core audio than swift

hint,tool,better,deal,optionals
or is it merely a hint to whatever tool converts between swift and objective-c to better deal with swift optionals

runtime,smaller
the swift runtime is smaller than the objective-c runtime

support,reflection
but swift is less dynamically typed than objective-c and has less support for reflection

penalty,fewer,situations,instance,method,objc_msgsend,protocol,objects,methods
swift will incur this penalty in fewer situations than objective-c will for instance method calls to swift-only protocol methods do not hit objc_msgsend but if the protocol is declared in objective-c or if the swift protocol is decorated with objective-c such that it can be adopted by objective-c objects as well then method calls to methods in that protocol adopted by swift objects appear to be dispatched via objc_msgsend

move,prudent,secure
while i think the move to swift is prudent but i think it overstates the case to argue that swift is significantly more secure that objective-c

dictionary,nsdictionary
this is because the swift dictionary is more strongly typed than the objective-c nsdictionary

objects,existence
no objects come magically into existence in swift any more than in objective-c

note,arrays,sensible
note that swift s arrays are much more sensible than objective-c s

