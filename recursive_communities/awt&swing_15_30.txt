features, components, better, ---------------------------------------------------

features,components
in swing has more features than the awt components

better,gui-based,first
swing is far better then awt and should be educated to people who is writing gui-based java for the first time

richer,out-of-the-box,components
well swing is richer in terms of out-of-the-box components than awt

better,components
swing is better and few people remember how to use awt components

better,obsolete
swing is far better than the obsolete awt library

javafx,better
swing or javafx would be better than awt

better,performance,old,heavyweight
consider using swing which has much better performance over the old heavyweight awt

newer,better,api
yes swing has newer and better api s than awt

functionality,advanced,better,features
it has functionality the same as a canvas but swing is more advanced and has better features than awt

web,old,newer,possible
you can read all over the web that awt is old and deprecated and swing is old but newer than awt and should be preferred over awt whenever possible

faster,platform,component
its was said that awt is faster than swing as it uses the platform component but due the arrival of faster processor etc ..

newer,better,api
swing has newer and better api s than awt

useful, ---------------------------------------------------

useful
as far as when awt may be more useful than swing -

useful
are there any cases where awt is more useful advised to use than swing or vice-versa

other---------------------------------------------------

jframe,frame
swing has more or less deprecated awt so you should extend jframe instead of frame

use,comfortable
i know you re thinking why did i use awt instead of swing but at the moment i am more comfortable with awt

portable
the swing library is much more portable than the awt library

use,threading,rules,likely,onerous
use swing follow the threading rules which are hardly likely to be more onerous than awt and enjoy

light,weight,components,memory
i mean by light weight i thought maybe the swing components occupy less memory than the awt components

performance,components,slower,buggier,pure,issues
performance swing components are generally slower and buggier than awt due to both the fact that they are pure java and to video issues on various platforms

gui,powerful,flexible
use a swing gui not an awt gui since swing is much more powerful and flexible than awt

easier,listeners
i find that the swing library is easier to use than awt although you do still have to use awt for listeners

efficient,advanced
generally swing is more efficient and advanced than awt

date,experience,days,javafx
awt is really out of date people have more experience with swing no days and even javafx

greater,power,flexibility,age
in general avoid awt for swing which has much greater power and flexibility although it too is showing its age just less so than awt

approach,closer,jdk,improvements,pipeline,java2d
the awt approach seems closer to bare metal but since jdk 6 brought a lot of improvements in swing rendering pipeline i would go the swing java2d approach

alternate,older,worse,technology,use,flowlayout
alternate way is to use awt - which is an older and worse technology than swing and in that case you can t use flowlayout - it puts all the components into one row

similar,capabilities,simplest,form
swing is relatively similar to awt apart from the fact that swing has more capabilities awt is probably the simplest form to start out with and has most if not all of the tools to complete your project hope this helps

time,components,native,compilation
swing will save your more time than awt as all the code of components of swing are purely written in java whereas of awt code of components are written in native language that is other than java thus compilation time of awt is more than swing

combobox,item,jcombobox,better
note first there is no combobox item in awt there is jcombobox in swing which is better to use than choice of awt

