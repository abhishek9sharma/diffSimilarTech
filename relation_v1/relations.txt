166

wmv	flv	1
('wmv', 'easier', 'flv', 'usability', '2562', 'i found the production of wmv much better and easier than flv because all windows flv encoders i tried are not really good and stable whereas pretty much every tool can natively output wmv\n')

testng	junit	5
('junit', 'better solution', 'testng', '', '913928', 'if there is a junit extension or similar framework that provides a better solution than testng then please let me know\n')
('testng', 'more', 'junit', '', '430883', 'testng is more flexible than junit and have multiple advantages like support for parallel testing for example\n')
('testng', 'more flexible', 'junit', 'usability', '430883', 'testng is more flexible than junit and have multiple advantages like support for parallel testing for example\n')
('testng', 'much friendlier', 'junit', '', '811937', 'testng is much friendlier to this paradigm than junit though\n')
('testng', 'more configurable', 'junit', '', '6671', 'testng strives to be much more configurable than junit but in the end they both work equally well\n')

listview	gridview	1
('listview', 'better', 'gridview', '', '10809', 'listview much better than the gridview dataview in that they let you write out clean html\n')

gethashcode	equals	1
('gethashcode', 'quicker', 'equals', '', '16381', 'gethashcode should be a lot quicker than equals but doesn t need to be unique\n')

illegalargumentexception	nullpointerexception	3
('nullpointerexception', 'longer', 'illegalargumentexception', '', '199290', 'decoding nullpointerexception is going to take a bit longer than illegalargumentexception filepath must be supplied or whatever\n')
('illegalargumentexception', 'more', 'nullpointerexception', '', '22074', 'in my mind illegalargumentexception seems more specific than using a nullpointerexception since it s telling me that the problem was with an argument i passed to the method and not with a value that may have been generated while performing the method\n')
('illegalargumentexception', 'more specific', 'nullpointerexception', '', '22074', 'in my mind illegalargumentexception seems more specific than using a nullpointerexception since it s telling me that the problem was with an argument i passed to the method and not with a value that may have been generated while performing the method\n')

goto	break	2
('break', 'better', 'goto', '', '723329', 'labeled break like in java would be better than goto for this purpose\n')
('goto', 'simpler', 'break', 'usability', '24476', 'if you re in a nested loop and need to break out of all loops a goto can make this much cleaner and simpler than break statements and if-checks\n')

svn	perforce	3
('perforce', 'more comfortable', 'svn', 'usability', '26851', 'perforce does have support for many other oses but our non-windows devs feel more comfortable with svn too\n')
('perforce', 'better', 'svn', '', '44752', 'make sure you re using a source control system that supports branching and merging i ve had experience with perforce and svn and while perforce is better svn is free\n')
('svn', 'more intuitive', 'perforce', '', '26851', 'if anything i find working with svn easier and more intuitive than perforce\n')

postgresql	mysql	22
('postgresql', 'much better', 'mysql', '', '201950', 'postgresql gets much better performance and this is coming from a former mysql partisan\n')
('postgresql', 'better', 'mysql', '', '442181', 'i also personally believe that postgresql has better handling of complex queries that include sub-selects and the like which most mysql users used to avoid\n')
('postgresql', 'more', 'mysql', '', '259517', 'i cannot propose any db not knowing your specific needs but if you want to use a free software which excludes oracle and you re not already experienced with mysql you should try postgresql which is more powerful than mysql\n')
('postgresql', 'more', 'mysql', '', '27439', 'from how i understand it postgresql is a more correct database implementation while mysql is less correct less compliant but faster\n')
('postgresql', 'better', 'mysql', '', '74931', 'with correct locking for safety reasons and heavy concurrent use postgresql performed better than mysql\n')
('postgresql', 'more', 'mysql', '', '586834', 'i had mentioned that in our rails application all select queries dropped below 100ms after switching to postgresql whereas some of the complex joins generated by activerecord would occasionally take as much as 15s or more with mysql 5.1 because of nested loops with inner table scans even when indices were available\n')
('postgresql', 'more', 'mysql', '', '259460', 'postgresql is more compliant but if you re comfortable with mysql and you re using an orm you should probably use that\n')
('postgresql', 'more correct', 'mysql', '', '27439', 'from how i understand it postgresql is a more correct database implementation while mysql is less correct less compliant but faster\n')
('postgresql', 'more compliant', 'mysql', '', '259460', 'postgresql is more compliant but if you re comfortable with mysql and you re using an orm you should probably use that\n')
('postgresql', 'more', 'mysql', '', '953814', 'postgresql has more established support for this but mysql has played catch up in the last year or so and has a working method of this in the latest versions\n')
('postgresql', 'much better performance', 'mysql', 'performance', '201950', 'postgresql gets much better performance and this is coming from a former mysql partisan\n')
('mysql', 'worse', 'postgresql', '', '52179', 'i just checked the timings using mysql 5 and they are slightly worse than postgresql\n')
('postgresql', 'more tricks', 'mysql', '', '957655', 'in general postgresql knows more tricks for how to optimize complicated queries than the mysql optimizer does but it also relies heavily on your having given the optimizer enough data to work with\n')
('mysql', 'faster', 'postgresql', 'performance', '953814', 'mysql s version is apparently marginally faster than postgresql but lacks some of the more advanced spatial features therefore it s pretty much limited to finding records that match a certain range of coordinates\n')
('postgresql', 'more sane', 'mysql', '', '761581', 'since postgresql is a lot more sane than mysql there are not that many tricks to report on\n')
('mysql', 'faster', 'postgresql', 'performance', '205364', 'mysql i am told can be optimized to do faster reads than postgresql but both are pretty ridiculously fast in terms of # transactions sec they support and it doesn t sound like that s your problem\n')
('postgresql', 'more', 'mysql', '', '957655', 'in general postgresql knows more tricks for how to optimize complicated queries than the mysql optimizer does but it also relies heavily on your having given the optimizer enough data to work with\n')
('postgresql', 'better handling', 'mysql', '', '442181', 'i also personally believe that postgresql has better handling of complex queries that include sub-selects and the like which most mysql users used to avoid\n')
('postgresql', 'performance probably better', 'mysql', 'performance', '846356', 'as i said postgresql is far superior and i hate mucking with mysql s bizarre bugs and i think that overall postgresql performance is probably better than mysql for any even slightly complicated query\n')
('postgresql', 'more established', 'mysql', '', '953814', 'postgresql has more established support for this but mysql has played catch up in the last year or so and has a working method of this in the latest versions\n')
('postgresql', 'slower', 'mysql', 'performance', '27443', 'in most regards postgresql is slower than mysql especially when it comes to fine tuning in the end\n')
('postgresql', 'more powerful', 'mysql', 'usability', '259517', 'i cannot propose any db not knowing your specific needs but if you want to use a free software which excludes oracle and you re not already experienced with mysql you should try postgresql which is more powerful than mysql\n')

simpletest	phpunit	1
('simpletest', 'easier', 'phpunit', 'usability', '34338', 'i found simpletest was even easier than phpunit to set up\n')

filesystems	ntfs	1
('filesystems', 'less', 'ntfs', '', '35627', 'when people say that unix filesystems are better they might mean to be saying oh ext3 stores bits in such as way that corruption happens way less than ntfs but they might also be talking about design choices made at the common layer above\n')

post	get	7
('post', 'more secure', 'get', '', '46614', 'post is also more secure than get because you aren t sticking information into a url\n')
('post', 'also more secure', 'get', '', '46614', 'post is also more secure than get because you aren t sticking information into a url\n')
('get', 'more appropiate', 'post', '', '198565', 'get is more appropiate for idempotent queries while post is more appropiate for action queries but you can shoot yourself in the foot just as easily with any of them if you don t understand the security architecture for the application you re maintaining\n')
('post', 'more', 'get', '', '724272', 'sorry that this post is more of the and for further information... type than a direct answer which i think has now been given-- i just thought it was helpful not to get things lost inside comments\n')
('get', 'more', 'post', '', '198565', 'get is more appropiate for idempotent queries while post is more appropiate for action queries but you can shoot yourself in the foot just as easily with any of them if you don t understand the security architecture for the application you re maintaining\n')
('post', 'also more', 'get', '', '46614', 'post is also more secure than get because you aren t sticking information into a url\n')
('get', 'less subsequent', 'post', '', '698048', 'an initial get request to a page usually costs less than subsequent post anyway so there s not much reason to avoid it\n')

m2e	maven	2
('m2e', 'more', 'maven', '', '47674', 'in other words m2e is more friendly to the maven way\n')
('m2e', 'more friendly', 'maven', '', '47674', 'in other words m2e is more friendly to the maven way\n')

udp	tcp	12
('udp', 'less overhead', 'tcp', 'performance', '799142', 'udp has less overhead than tcp and is therefore faster\n')
('tcp', 'more', 'udp', '', '584131', 'tcp mounts are more reliable and you know you have a network problem much faster than with udp\n')
('udp', 'less', 'tcp', '', '799142', 'udp has less overhead than tcp and is therefore faster\n')
('udp', 'faster', 'tcp', 'performance', '47929', 'udp is faster than tcp and the simple reason is because its nonexistent acknowledge packet ack that permits a continuous packet stream instead of tcp that acknowledges a set of packets calculated by using the tcp window size and round-trip time rtt\n')
('tcp', 'better throughput', 'udp', '', '638446', 'in some applications tcp is faster better throughput than udp\n')
('tcp', 'faster', 'udp', 'performance', '638446', 'in some applications tcp is faster better throughput than udp\n')
('tcp', 'faster', 'udp', 'performance', '584131', 'tcp mounts are more reliable and you know you have a network problem much faster than with udp\n')
('tcp', 'faster', 'udp', 'performance', '638446', 'for example i read an experiment in which a stream of 300 byte packets was being sent over ethernet 1500 byte mtu and tcp was 50 faster than udp\n')
('tcp', 'more reliable', 'udp', 'reliability', '584131', 'tcp mounts are more reliable and you know you have a network problem much faster than with udp\n')
('udp', 'lower overhead', 'tcp', 'performance', '584128', 'udp has a much lower overhead than tcp\n')
('tcp', 'faster better throughput', 'udp', 'performance', '638446', 'in some applications tcp is faster better throughput than udp\n')
('tcp', 'faster better', 'udp', 'performance', '638446', 'in some applications tcp is faster better throughput than udp\n')

textmate	emacs	2
('emacs', 'better', 'textmate', '', '967805', 'i feel like emacs is so much better than textmate\n')
('textmate', 'better', 'emacs', '', '48015', 'textmate is a better emacs for macs though that won t help you with solaris\n')

division	modulo	1
('division', 'faster', 'modulo', 'performance', '48103', 'a side effect of many division routines is the modulo - so in few cases should division actually be faster than modulo\n')

vimeo	youtube	1
('vimeo', 'fewer users', 'youtube', '', '50909', 'vimeo will always have fewer users than youtube because the user experience is poor for low bitrate users\n')

vmware	virtualbox	4
('vmware', 'faster', 'virtualbox', 'performance', '630233', 'even though vmware has been faster for me i still use virtualbox because it s good enough and is free and im cheap\n')
('vmware', 'faster', 'virtualbox', 'performance', '630233', 'in my experience i ve found that vmware seems to be faster than virtualbox although i don t have any hard data to back it up\n')
('vmware', 'more features', 'virtualbox', 'usability', '55578', 'vmware has more features but costs 80 virtualbox on the other hand is more basic but is free for most users see virtualbox licensing faq for details\n')
('vmware', 'more', 'virtualbox', '', '55578', 'vmware has more features but costs 80 virtualbox on the other hand is more basic but is free for most users see virtualbox licensing faq for details\n')

gdi	directx	2
('directx', 'faster', 'gdi', 'performance', '368466', 'to say directx is faster than gdi is also something of a simplification - wpf and gdi-based rendering technologies just have different performance characteristics\n')
('gdi', 'slower', 'directx', 'performance', '58301', 'speed is usually faster than gdi and slower than directx and depends greatly on how you do things seen something to work 60 times faster after rewriting in a sensible way\n')

wideimage	phpthumb	2
('wideimage', 'more', 'phpthumb', '', '65079', 'wideimage is the more modern php5 approach while phpthumb has much more features\n')
('wideimage', 'more modern', 'phpthumb', '', '65079', 'wideimage is the more modern php5 approach while phpthumb has much more features\n')

ubuntu	linux	1
('ubuntu', 'closer', 'linux', '', '68674', 'ubuntu is getting closer but there are still numerous things with linux that will keep the grandmothers of the world from using it\n')

icefaces	richfaces	3
('icefaces', 'more', 'richfaces', '', '69545', 'there is icefaces which provides more semantic support than richfaces .also you can try nitobi suite which also provides similar kinda solution.if you are not satisfied with any of these i suggest try to write your own part extending the sun faces\n')
('icefaces', 'more semantic', 'richfaces', '', '69545', 'there is icefaces which provides more semantic support than richfaces .also you can try nitobi suite which also provides similar kinda solution.if you are not satisfied with any of these i suggest try to write your own part extending the sun faces\n')
('icefaces', 'more semantic support', 'richfaces', 'usability', '69545', 'there is icefaces which provides more semantic support than richfaces .also you can try nitobi suite which also provides similar kinda solution.if you are not satisfied with any of these i suggest try to write your own part extending the sun faces\n')

heapsort	quicksort	8
('quicksort', 'usually faster then', 'heapsort', 'performance', '941325', 'in practice however quicksort is usually faster then heapsort\n')
('quicksort', 'more efficient', 'heapsort', 'performance', '771892', 'average asymptotic order of quicksort is o nlogn and it s usually more efficient than heapsort due to smaller constants tighter loops\n')
('heapsort', 'slower', 'quicksort', 'performance', '70423', 'but there are many citations of real world tests which show that heapsort is significantly slower than quicksort on average\n')
('quicksort', 'faster', 'heapsort', 'performance', '107883', 'for example quicksort average cost t n.log n and heapsort average cost t n.log n are both sorting algorithms with the same average cost - yet quicksort is typically much faster than heapsort\n')
('heapsort', 'significantly slower', 'quicksort', 'performance', '70423', 'but there are many citations of real world tests which show that heapsort is significantly slower than quicksort on average\n')
('quicksort', 'usually faster', 'heapsort', 'performance', '941325', 'in practice however quicksort is usually faster then heapsort\n')
('quicksort', 'simpler', 'heapsort', 'usability', '941325', 'each iteration in quicksort is a lot simpler than heapsort\n')
('heapsort', 'smaller sets', 'quicksort', 'memory', '285023', 'i was just going to say radix sort however that could be a bit above what you were looking to implement introsort is generally the accepted sorting solution for data it s a variation of quicksort that switches to heapsort when it reaches smaller sets as it s faster on smaller sets than quicksort\n')

quicksort	mergesort	17
('quicksort', 'faster', 'mergesort', 'performance', '90477', 'as many people have noted the average case performance for quicksort is faster than mergesort\n')
('quicksort', 'not better', 'mergesort', '', '70627', 'quicksort is not better it is well suited for a different kind of application than mergesort\n')
('quicksort', 'usually faster', 'mergesort', 'performance', '70440', 'quicksort is usually faster than mergesort just because it s easier to code a tight implementation and the operations it does can go faster\n')
('quicksort', 'better', 'mergesort', '', '77945', 'quicksort is not better than mergesort\n')
('quicksort', 'more complicated', 'mergesort', 'usability', '680613', 'quicksort is also more complicated than mergesort especially if you want to write a really solid implementation and so if you re aiming for simplicity and maintainability merge sort becomes a promising alternative with very little performance loss\n')
('quicksort', 'better', 'mergesort', '', '497819', 'previously discussed on so why is quicksort better than mergesort\n')
('mergesort', 'worse', 'quicksort', '', '487454', 'given that it is possible to vastly reduce the likelihood of the worst case of quicksort s time complexity via random selection of the pivot for example i think one could argue that mergesort is worse in all but the pathological case of quicksort\n')
('quicksort', 'generally faster', 'mergesort', 'performance', '70440', 'it s because that quicksort is generally faster that people use it instead of mergesort\n')
('quicksort', 'faster', 'mergesort', 'performance', '70440', 'quicksort is usually faster than mergesort just because it s easier to code a tight implementation and the operations it does can go faster\n')
('quicksort', 'better', 'mergesort', '', '497967', 'the biggest difference that can be produced between the two of them will always be to quicksort s detriment and it involves lists that are already largely sorted or contain a large number of ties when quicksort does better than mergesort the difference will not be nearly so great\n')
('quicksort', 'worse', 'mergesort', '', '201171', 'quicksort is worse complexity than mergesort in the worst case.\n')
('quicksort', 'also more', 'mergesort', '', '680613', 'quicksort is also more complicated than mergesort especially if you want to write a really solid implementation and so if you re aiming for simplicity and maintainability merge sort becomes a promising alternative with very little performance loss\n')
('quicksort', 'worse complexity', 'mergesort', 'usability', '201171', 'quicksort is worse complexity than mergesort in the worst case.\n')
('quicksort', 'faster', 'mergesort', 'performance', '961662', 'in most cases quicksort will run faster than mergesort even though the worst-case execution time is longer\n')
('quicksort', 'also more complicated', 'mergesort', 'usability', '680613', 'quicksort is also more complicated than mergesort especially if you want to write a really solid implementation and so if you re aiming for simplicity and maintainability merge sort becomes a promising alternative with very little performance loss\n')
('quicksort', 'not better', 'mergesort', '', '77945', 'quicksort is not better than mergesort\n')
('quicksort', 'quicker', 'mergesort', '', '497794', 'i had been taught that quicksort is almost always quicker than mergesort and i understand that there is some debate on this topic but i at least expected it to be closer than this\n')

multiplication	addition	6
('multiplication', 'higher', 'addition', '', '70881', 'precedence rules specify priority of operators which operators will be evaluated first multiplication has higher precedence than addition pemdas\n')
('multiplication', 'operator higher precedence', 'addition', '', '810193', 'well we know it is the first one because of precedence - the binary multiplication operator has higher precedence than the binary + addition operator and is resolved first\n')
('multiplication', 'higher precedence', 'addition', '', '70881', 'precedence rules specify priority of operators which operators will be evaluated first multiplication has higher precedence than addition pemdas\n')
('multiplication', 'operator higher', 'addition', '', '810193', 'well we know it is the first one because of precedence - the binary multiplication operator has higher precedence than the binary + addition operator and is resolved first\n')
('multiplication', 'higher', 'addition', '', '465728', 'i know the basics division and multiplication higher than addition and subtraction but i would have to look up something more esoteric\n')
('addition', 'faster', 'multiplication', 'performance', '836856', 'also addition is faster than multiplication and multiplication is faster than division\n')

bazaar	git	4
('bazaar', 'slower', 'git', 'performance', '706457', 'an incredibly rough eye balling of the numbers they posted showed bazaar to be 2-4x slower than either git or mercurial in the use cases tested\n')
('bazaar', 'slower', 'git', 'performance', '706428', 'i hear all this stuff about bazaar being slower than git\n')
('bazaar', 'slower', 'git', 'performance', '897862', 'mercurial is significantly faster than bazaar it s slower than git though by a much smaller difference\n')
('bazaar', 'imho easier', 'git', 'usability', '77883', 'bazaar is imho easier to learn than git\n')

multiplication	multiplying	2
('multiplication', 'slightly more', 'multiplying', '', '79771', 'multiplication is slightly more complex as it needs an integer multiplying followed by a scale back such as 0.72 2 becomes 72 200 becomes 14400 becomes 144 scaleback becomes 1.44\n')
('multiplication', 'slightly more complex', 'multiplying', 'usability', '79771', 'multiplication is slightly more complex as it needs an integer multiplying followed by a scale back such as 0.72 2 becomes 72 200 becomes 14400 becomes 144 scaleback becomes 1.44\n')

datediff	difference	2
('datediff', 'more difficult', 'difference', '', '81983', 'datediff becomes more difficult to use as you have more dateparts in your difference in your case looks like minutes and seconds\n')
('datediff', 'more', 'difference', '', '81983', 'datediff becomes more difficult to use as you have more dateparts in your difference in your case looks like minutes and seconds\n')

fractions	integer	1
('fractions', 'larger', 'integer', 'memory', '85416', 'if the number of bits in the mantissa or fractions is larger than the number of bits in your integer type then you ll possibly lose precision when someone types in a number such as\n')

webclient	webrequest	2
('webclient', 'sometimes easier', 'webrequest', 'usability', '91317', 'webclient is sometimes easier to use than webrequest\n')
('webclient', 'simpler', 'webrequest', 'usability', '449918', 'webclient is simpler to use than webrequest\n')

datamapper	activerecord	3
('datamapper', 'potentially more', 'activerecord', '', '94070', 'datamapper is potentially more complex then activerecord but it s a lot easier to develop your domain model and database asynchronous then with activerecord\n')
('datamapper', 'faster', 'activerecord', 'performance', '818424', 'i d recommend datamapper for orm not only it s way faster than activerecord but it s also very modularly built and plugins are actual gems that you can easily install\n')
('datamapper', 'potentially more complex', 'activerecord', 'usability', '94070', 'datamapper is potentially more complex then activerecord but it s a lot easier to develop your domain model and database asynchronous then with activerecord\n')

x86	64bit	2
('x86', 'considerably slower', '64bit', 'performance', '95121', 'x86 is considerably slower a few clocks plus a clock or so per function argument while 64bit is much less because most function arguments are passed in registers instead of on the stack\n')
('64bit', 'more', 'x86', '', '531772', 'reason why double can t be declared volatile it s 64bit which makes it more than the word size on x86 which prevents it from being declared volatile in the cli if i remember correctly\n')

height	width	8
('width', 'longer', 'height', '', '505839', 'my fixed document xps has its page orientation set to landscape the page media size has a width that is longer that its height and it displays correctly in the viewer as landscape\n')
('height', 'more', 'width', '', '99817', 'that is the height is more than half the width and depth -- little rule of thumb\n')
('width', 'greater', 'height', '', '340054', 'add a new column until width is greater than height\n')
('width', 'greater then', 'height', '', '140501', 'if the width is greater then height 3 4 screen.width then\n')
('height', 'greater', 'width', '', '922429', 'it s close - i m finding if height is greater than width the left position of the rotated image is incorrect\n')
('width', 'greater', 'height', '', '922429', 'similarly if width is greater than height the top position of the rotated image is incorrect\n')
('width', 'greater', 'height', '', '140501', 'if the width is greater then height 3 4 screen.width then\n')
('height', 'greater', 'width', '', '340054', 'add a new row until height is greater than width\n')

double	int	8
('double', 'faster', 'int', 'performance', '594466', 'so i asked myself can a double be faster than a int\n')
('double', 'less', 'int', '', '526070', 'similarly when i cast a double that is less than the minimum possible int i also get -2147483648\n')
('double', 'way greater', 'int', '', '605544', 'the range of double is way greater than the range of 32 or 64 bit int which is why std floor returns a double\n')
('double', 'more difficult', 'int', '', '105339', 'for floats and double it s more difficult as with plain int as these may or not may be in the host machines byte-order\n')
('double', 'far greater', 'int', '', '605547', 'another reason is that the range of double is far greater than that of int\n')
('double', 'value also larger', 'int', 'memory', '511928', 'the largest double value is also larger than the largest int so it would have to be a long\n')
('double', 'greater', 'int', '', '526070', 'today i noticed that when i cast a double that is greater than the maximum possible int to an int i get -2147483648\n')
('double', 'more', 'int', '', '105339', 'for floats and double it s more difficult as with plain int as these may or not may be in the host machines byte-order\n')

puremvc	cairngorm	2
('puremvc', 'more invasive', 'cairngorm', '', '109038', 'puremvc is more invasive than cairngorm meaning that your code is heavily dependent on the framework you have to subclass implement the framework classes interfaces but that doesn t mean that cairngorm isn t\n')
('puremvc', 'more', 'cairngorm', '', '109038', 'puremvc is more invasive than cairngorm meaning that your code is heavily dependent on the framework you have to subclass implement the framework classes interfaces but that doesn t mean that cairngorm isn t\n')

png	gif	10
('png', 'better', 'gif', '', '115838', 'as a general rule png is never worse and often better than gif because of superior compression\n')
('png', 'larger', 'gif', 'memory', '610573', 'jpg and png work well for most applications but the files will be larger than gif for very simple graphics\n')
('png', 'larger equivalent', 'gif', 'memory', '116461', 'if your png files are coming out larger than equivalent gif files it is almost certainly because your source image has more than 256 colors\n')
('png', 'better', 'gif', '', '319433', 'paul points out that png compresses static line art better than gif for nearly every situation\n')
('png', 'newer', 'gif', '', '610542', 'png is a newer format and often better than either jpeg of gif - especially for screenshots\n')
('png', 'never worse', 'gif', '', '115838', 'as a general rule png is never worse and often better than gif because of superior compression\n')
('gif', 'slightly better', 'png', '', '115838', 'there might be some edge cases where gif is slightly better because the png format may have a slightly larger overhead from metadata but it s really not worth the worry\n')
('png', 'smaller', 'gif', 'memory', '116210', 'indexed png less than 256 colors is actually always smaller than gif so i use that most of the time\n')
('png', 'smaller', 'gif', 'memory', '610565', 'if png isn t smaller than gif then your software may be saving it poorly - look for png optimisation progams like pngout and pngnq\n')
('png', 'newer format', 'gif', '', '610542', 'png is a newer format and often better than either jpeg of gif - especially for screenshots\n')

hash	md5	3
('hash', 'more reliable', 'md5', 'reliability', '116739', 'sha-256 uses 64 characters in the database but with an index on the column that isn t a problem and it is a proven hash and more reliable than md5 and sha-1\n')
('md5', 'much more', 'hash', '', '134346', 'using a non-reversible hash such as md5 is much more secure and you can store the hash value as clear text\n')
('md5', 'much more secure', 'hash', '', '134346', 'using a non-reversible hash such as md5 is much more secure and you can store the hash value as clear text\n')

pbkdf2	hash	1
('pbkdf2', 'quicker', 'hash', '', '116767', 'a key-stretching algorithm like pbkdf2 applies a quicker hash like sha512 thousands of times typically causing the hash generation to take 1 5 of a second or so\n')

metaphone	soundex	1
('metaphone', 'better', 'soundex', '', '123076', 'edit double metaphone was specifically designed to be better than soundex and work in languages other than english\n')

rsa	aes	5
('rsa', 'more so', 'aes', '', '124248', 'that is actually not the case with rsa which is --- more so than aes --- just a math equation\n')
('aes', 'less safe', 'rsa', '', '124248', 'block crypto algorithms like aes do suffer from this problem too but without a pki aes is no less safe than rsa\n')
('aes', 'less', 'rsa', '', '124248', 'block crypto algorithms like aes do suffer from this problem too but without a pki aes is no less safe than rsa\n')
('rsa', 'more', 'aes', '', '124248', 'that is actually not the case with rsa which is --- more so than aes --- just a math equation\n')
('rsa', 'less user-friendly', 'aes', 'usability', '124248', 'algorithms like rsa are much less user-friendly than aes\n')

shellsort	quicksort	1
('shellsort', 'slower', 'quicksort', 'performance', '128055', 'if you use shellsort no extra memory is needed at all though shellsort will be much slower than quicksort\n')

g++	gcc	1
('g++', 'looser', 'gcc', '', '128221', 'unfortunately g++ packed the structs significantly looser than gcc which caused significant problems sharing objects between c and c++ code\n')

inline	inlining	1
('inline', 'bigger', 'inlining', 'memory', '133271', 'if a function is static thus not exported anyway and only called once within your code and you never use a pointer to the function chances are good that gcc will decide to inline it automatically as it will have no negative impact the binary won t get bigger by inlining it only once\n')

codeigniter	cakephp	1
('codeigniter', 'lighter', 'cakephp', 'memory', '139120', 'i suspect codeigniter doesn t have quite as flexible a structure it s smaller and lighter than cakephp but a quick look at the cakephp manual to see how behaviors components helpers and the vendors folder may be helpful\n')

integer	floating-point	6
('floating-point', 'math slower', 'integer', 'performance', '514184', 'they take up more space and floating-point math is slower than integer math\n')
('integer', 'simpler', 'floating-point', 'usability', '141340', 'but integer arithmetic arguably is inherently simpler than floating-point\n')
('integer', 'greater', 'floating-point', '', '798046', 'i know c++ have functions that return largest or smallest integer that is greater or lower than a like ceil or floor.is there a function that implement digit limitation of floating-point variable\n')
('integer', 'arithmetic usually faster', 'floating-point', 'performance', '288727', 'which uses all integer arithmetic is usually faster than its floating-point equivalent likely significantly faster in the case of a floating-point type equivalent to t-sql s decimal type\n')
('floating-point', 'slower', 'integer', 'performance', '514184', 'they take up more space and floating-point math is slower than integer math\n')
('integer', 'faster', 'floating-point', 'performance', '288727', 'which uses all integer arithmetic is usually faster than its floating-point equivalent likely significantly faster in the case of a floating-point type equivalent to t-sql s decimal type\n')

cpu	processors	2
('cpu', 'more', 'processors', '', '360494', 'passive loadbalancing if a physical cpu is running more than one task the scheduler will attempt to run any new tasks on a second physical processors\n')
('cpu', 'better', 'processors', '', '142240', 'some fancy compilers understand the un interrelatedness of instructions to a limited extent and will automatically interleave instruction flows probably over a longer window than the cpu sees to better utilise the processors\n')

versioning	upgrade	2
('upgrade', 'lower', 'versioning', '', '994571', 'if i enable this then any setup is ran every time it will be asking for upgrade either it is on lower versioning over higher versioning or higher versioning over lower versioning\n')
('versioning', 'number easier', 'upgrade', 'usability', '142427', 'using compatibility as the central point in the versioning number makes it easier for users especially if te product is a library to judge whether or not they can expect a smoothe and safe upgrade or not\n')

buildr	maven	1
('buildr', 'faster', 'maven', 'performance', '145433', 'and even though everybody says ruby is slow buildr was 2-6x faster than maven\n')

nginx	apache	2
('nginx', 'less memory', 'apache', 'memory', '148194', 'servers like lighthttp and nginx can handle large amounts of traffic in much less memory than apache if you can sacrifice apache s power and flexibility or if you just don t need those things which often you don t\n')
('nginx', 'faster', 'apache', 'performance', '535933', 'not only is nginx supposedly faster than apache at delivering static content but this also offloads your rails application for every image stylesheet javascript or whatever other static content\n')

cpu	hyperthreading	1
('cpu', 'more', 'hyperthreading', '', '149212', 'almost any new cpu has more than one core or if it has just one it might support hyperthreading and thus pretending it has more than one\n')

3des	aes	2
('3des', 'more expensive', 'aes', '', '149409', '3des is more expensive than aes for example\n')
('3des', 'more', 'aes', '', '149409', '3des is more expensive than aes for example\n')

irrlicht	ogre	2
('irrlicht', 'cleaner api', 'ogre', '', '151399', 'irrlicht has a cleaner api lower system requirements and works better across platforms than ogre in my opinion\n')
('irrlicht', 'cleaner', 'ogre', '', '151399', 'irrlicht has a cleaner api lower system requirements and works better across platforms than ogre in my opinion\n')

inherited	subclassing	2
('inherited', 'more', 'subclassing', '', '154057', 'inherited is more useful when a new subclassing wants to change the way a method works if you just need to change the data the class uses to work probably an approach like this would do the trick\n')
('inherited', 'more useful', 'subclassing', 'usability', '154057', 'inherited is more useful when a new subclassing wants to change the way a method works if you just need to change the data the class uses to work probably an approach like this would do the trick\n')

jogl	lwjgl	2
('jogl', 'more', 'lwjgl', '', '157238', 'jogl is more java-like whereas lwjgl provides more gaming functionality on top of opengl access\n')
('jogl', 'more java-like', 'lwjgl', '', '157238', 'jogl is more java-like whereas lwjgl provides more gaming functionality on top of opengl access\n')

svn	cvs	8
('svn', 'more comparable format', 'cvs', '', '161202', 'the first one can be solved by using svn +ssh which is the more comparable format as cvs uses its own protocol as well\n')
('svn', 'better', 'cvs', '', '159971', 'svn is better than cvs\n')
('svn', 'better', 'cvs', '', '160037', 'svn is better than cvs because it was designed to be - it s roughly the same thing with some simplications and new features\n')
('cvs', 'more useful features', 'svn', 'usability', '161216', 'the other distributed tools are a lot faster svn is slow as hell even cvs can be faster sometimes have much more useful features than svn are developing rapidly while seeing any new feature in svn takes years\n')
('svn', 'more efficient', 'cvs', 'performance', '191616', 'in fact svn does stores binaries a lot more efficient than cvs for more info see the svn-faq\n')
('svn', 'better', 'cvs', '', '161216', 'svn was supposed to be better than cvs but in some areas that didn t work well\n')
('cvs', 'more popular', 'svn', 'usability', '782375', 'in addition another coworker said cvs was a lot more popular than svn\n')
('svn', 'better', 'cvs', '', '245323', 'that being said i think svn is better in every other respect and you probably shouldn t start a new project with cvs\n')

keyboard	mouse	3
('keyboard', 'faster', 'mouse', 'performance', '414289', 'the keyboard is almost always faster than the mouse\n')
('keyboard', 'more important', 'mouse', '', '923190', 'also in this case keyboard input is essential and more important than mouse interaction\n')
('keyboard', 'more', 'mouse', '', '161193', 'for example do you use keyboard more than mouse\n')

scheme	lisp	4
('scheme', 'simpler common', 'lisp', 'usability', '563472', 'it s popular it s actively developed it has many libraries offering the features of a modern programming environment and scheme is somewhat simpler not to say better just simpler than common lisp\n')
('scheme', 'somewhat simpler', 'lisp', 'usability', '563472', 'it s popular it s actively developed it has many libraries offering the features of a modern programming environment and scheme is somewhat simpler not to say better just simpler than common lisp\n')
('scheme', 'somewhat simpler not', 'lisp', 'usability', '563472', 'it s popular it s actively developed it has many libraries offering the features of a modern programming environment and scheme is somewhat simpler not to say better just simpler than common lisp\n')
('scheme', 'better common', 'lisp', '', '170948', 'here is a solution in scheme because i know that better than common lisp and have an interpreter for checking my work\n')

apache	lighttpd	3
('lighttpd', 'even faster', 'apache', 'performance', '371821', 'for instance in some benchmarks lighttpd is even faster at serving static resources than apache\n')
('apache', 'more powerful', 'lighttpd', 'usability', '172177', 'the benefit of both apache is more powerful and extensible useless if you don t need that power but anyway... and lighttpd is faster at static content\n')
('apache', 'more', 'lighttpd', '', '172177', 'the benefit of both apache is more powerful and extensible useless if you don t need that power but anyway... and lighttpd is faster at static content\n')

vhdl	verilog	4
('vhdl', 'more', 'verilog', '', '177565', 'vhdl is more popular in europe and verilog is dominating in the us\n')
('vhdl', 'more popular', 'verilog', 'usability', '177565', 'vhdl is more popular in europe and verilog is dominating in the us\n')
('vhdl', 'more feature-rich', 'verilog', '', '178555', 'yes vhdl was once much more feature-rich than verilog but later revisions of the language verilog 2001 verilog 2005 systemverilog etc.. have cherry-picked most of the interesting features and there is far more robust toolchain support for verilog and its variant these days in addition to it being the dominant language in use in the us in my experience vhdl is only used here when dealing with extreme legacy blocks and in academic contexts partially due to the tools support mentioned previously\n')
('verilog', 'less common', 'vhdl', '', '764074', 'pacoblaze was written in verilog which like adam said less common than vhdl\n')

google-chrome	safari	2
('google-chrome', 'also earlier', 'safari', '', '179520', 'google-chrome also uses an earlier version of webkit than the current safari so pages should be checked in both browsers\n')
('google-chrome', 'also earlier version', 'safari', '', '179520', 'google-chrome also uses an earlier version of webkit than the current safari so pages should be checked in both browsers\n')

inherited	properties	3
('inherited', 'much more', 'properties', '', '183126', 'now in .net for desktop controls you can use inherited which is much more powerful than the old tag properties anyway\n')
('inherited', 'easier', 'properties', 'usability', '766479', 'multiple inherited makes it easier to compose classes from small mixin base classes that implement functionality and have properties to remember state\n')
('inherited', 'much more powerful', 'properties', 'usability', '183126', 'now in .net for desktop controls you can use inherited which is much more powerful than the old tag properties anyway\n')

ant	maven	6
('maven', 'really better', 'ant', '', '599070', 'and it turns out maven really does a better job of managing dependencies for ant build.xml files than does ivy\n')
('ant', 'more', 'maven', '', '183290', 'as you ve already said ant is more a replacement for gnu make while maven is primary a buildout dependency-management application\n')
('ant', 'better', 'maven', '', '304069', 'however some things ant handles better than maven and if there s not a maven plugin for it it may be difficult to handle in maven\n')
('ant', 'more', 'maven', '', '413752', 'i d definitely use ant or maven - my preference is ant because it s more flexible and i think it would suit your development style more than maven as well\n')
('ant', 'clearer', 'maven', '', '989209', 'i find the ant one much clearer than the maven one\n')
('maven', 'really better job', 'ant', '', '599070', 'and it turns out maven really does a better job of managing dependencies for ant build.xml files than does ivy\n')

webkit	gecko	1
('webkit', 'smaller', 'gecko', 'memory', '184381', 'my understanding is webkit is pretty good smaller than gecko\n')

configobj	configparser	1
('configobj', 'easier', 'configparser', 'usability', '186990', 'i ve heard that configobj is easier to work with than configparser\n')

abstract-class	subclass	1
('abstract-class', 'more', 'subclass', '', '190913', 'making abstract-class before i had more than one subclass in mind for them\n')

web2py	django	1
('web2py', 'easier', 'django', 'usability', '196705', 'anyway the most important issue is that web2py is easier than django pylons php and rails\n')

nfa	dfa	1
('nfa', 'far easier', 'dfa', 'usability', '198624', 'because representation of a given problem with a nfa is far easier than the equivalent dfa\n')

dialog	pop-up	2
('dialog', 'less intrusive', 'pop-up', '', '206134', 'from a practice standpoint - excluding accessibility - modal windows provide an alternative that are less startling as say dialog boxes and feel less intrusive than pop-up windows\n')
('dialog', 'better', 'pop-up', '', '784719', 'use floating divs instead which looks like a modal dialog but are better than the pop-up\n')

antivirus	norton	1
('antivirus', 'better', 'norton', '', '215539', 'many other antivirus software that works just as well if not better than norton like avg avast and others do allow you to uninstall from the add remove\n')

compiled-language	interpreted-language	1
('compiled-language', 'faster', 'interpreted-language', 'performance', '223029', 'a compiled-language will generally run faster than an interpreted-language so i think ruby and php start behind the eight ball but it really comes down to how you use the language and how you structure the code\n')

multiplication	division	13
('multiplication', 'faster', 'division', 'performance', '226515', 'multiplication is faster division is more accurate\n')
('multiplication', 'faster', 'division', 'performance', '836856', 'also addition is faster than multiplication and multiplication is faster than division\n')
('multiplication', 'generally faster', 'division', 'performance', '899929', 'if the latter yes floating point multiplication is generally faster than division\n')
('division', 'slower', 'multiplication', 'performance', '655581', 'division algorithms are slower than multiplication algorithms in most cases\n')
('division', 'busier place', 'multiplication', '', '506252', 'both operations are done down at the floating point unit fpu level and even in the world of integral alus the division circuit is a far busier place than a multiplication circuit\n')
('division', 'slower', 'multiplication', 'performance', '506241', 'division is per se slower than multiplication however i don t know the details\n')
('division', 'slower', 'multiplication', 'performance', '436535', 'can be fast or it can be awfully slow even if division is done entirely in hardware if it is done using a div instruction this instruction is about 3 to 4 times slower than a multiplication on modern cpus\n')
('multiplication', 'faster', 'division', 'performance', '899887', 'multiplication is faster than division so the second method is faster\n')
('multiplication', 'faster', 'division', 'performance', '980962', 'on many processors integer multiplication is faster than integer division\n')
('multiplication', 'faster', 'division', 'performance', '436535', 'in a 64 bit application this code will be a lot faster than in a 32 bit application in a 32 bit application multiplying two 64 bit numbers take 3 multiplication and 3 additions on 32 bit values - however it might be still faster than a division on a 32 bit machine\n')
('multiplication', 'faster', 'division', 'performance', '899929', 'if the latter yes floating point multiplication is generally faster than division\n')
('division', 'slower', 'multiplication', 'performance', '655584', 'which one is faster is indeed a cpu-specific issue or at least how much faster is cpu specific yes division is typically seen as slower than multiplication\n')
('multiplication', 'slower hardware', 'division', 'performance', '436535', 'you always need to know the magic number here 0xaaaaaaab and the correct operations after the multiplication shifts and or additions in most cases and both is different depending on the number you want to divide by and both take too much cpu time to calculate them on the fly that would be slower than hardware division\n')

teamcity	cruisecontrol	1
('teamcity', 'far easier', 'cruisecontrol', 'usability', '226593', 'for a one man shop teamcity is far easier to setup and configure than cruisecontrol\n')

innodb	myisam	18
('innodb', 'heavier', 'myisam', '', '262798', 'i know innodb is heavier than myisam but just how much more\n')
('innodb', 'more', 'myisam', '', '365834', 'innodb has more overhead but uses row-level locking so that reads and writes can happen concurrently without the problems that myisam s table locking incurs\n')
('innodb', 'higher', 'myisam', '', '579589', 'their conclusion innodb has 30 higher performance than myisam on average\n')
('myisam', 'less suitable', 'innodb', '', '754723', 'plus you have to make your tables myisam which is generally less suitable than innodb\n')
('innodb', 'better', 'myisam', '', '380074', 'innodb has better performance than myisam though innodb needs more attention to tuning the configuration innodb supports atomic changes transactions foreign keys and innodb is much more resistant to corrupting data in a crash\n')
('innodb', 'slower', 'myisam', 'performance', '277511', 'innodb is slower than myisam for most uses but can perform faster in certain conditions due to a better locking mechanism\n')
('myisam', 'faster', 'innodb', 'performance', '990780', 'i heard myisam is faster but others say innodb can be fast also but it takes abit more to optimize it\n')
('innodb', 'slower', 'myisam', 'performance', '228750', 'also innodb is slower than myisam unless myisam is blocking for a huge select\n')
('myisam', 'generally less suitable', 'innodb', '', '754723', 'plus you have to make your tables myisam which is generally less suitable than innodb\n')
('innodb', 'slower', 'myisam', 'performance', '990830', 'innodb is slower for read only databases because it has features acid compliant row level locking that myisam leaves out\n')
('innodb', 'higher performance', 'myisam', 'performance', '579589', 'their conclusion innodb has 30 higher performance than myisam on average\n')
('innodb', 'higher throughput', 'myisam', '', '405022', 'innodb is harder to tune since it has more knobs but a properly tuned innodb system can often have higher throughput than myisam due to better locking and better i o patterns\n')
('innodb', 'actually faster', 'myisam', 'performance', '389824', 'innodb is actually faster than myisam in quite a few cases so it depends on what your application s mix of selects updates concurrent queries indexes buffer configuration etc\n')
('innodb', 'faster', 'myisam', 'performance', '389824', 'innodb is actually faster than myisam in quite a few cases so it depends on what your application s mix of selects updates concurrent queries indexes buffer configuration etc\n')
('myisam', 'generally less', 'innodb', '', '754723', 'plus you have to make your tables myisam which is generally less suitable than innodb\n')
('myisam', 'faster', 'innodb', 'performance', '405022', 'myisam is faster in data warehousing situations such as full table scan reporting etc.. but innodb can actually be faster in many cases with normal oltp queries\n')
('innodb', 'better performance', 'myisam', 'performance', '380074', 'innodb has better performance than myisam though innodb needs more attention to tuning the configuration innodb supports atomic changes transactions foreign keys and innodb is much more resistant to corrupting data in a crash\n')
('innodb', 'more overhead', 'myisam', 'performance', '365834', 'innodb has more overhead but uses row-level locking so that reads and writes can happen concurrently without the problems that myisam s table locking incurs\n')

for-loop	loops	4
('loops', 'wider', 'for-loop', '', '848039', 'the scope of the variable in the test of the while loops is wider than the scope of variables declared in the header of the for-loop\n')
('for-loop', 'generally better', 'loops', '', '472283', 'the conclusion of the article is that using for-loop is generally better and faster than the foreach loops\n')
('for-loop', 'much faster', 'loops', 'performance', '365630', 'i did test it a while ago with the result that a for-loop is much faster than a foreach loops\n')
('for-loop', 'neater', 'loops', '', '229915', 'putting the whole thing in a for-loop makes it neater and ensures that the iterating isread is called each loops\n')

nstableview	nssplitview	1
('nstableview', 'shorter', 'nssplitview', '', '241621', 'a pattern i also use is to make the nstableview slightly shorter than the nssplitview and have buttons at the bottom add delete etc\n')

kerberos	ldap	1
('kerberos', 'more', 'ldap', '', '242546', 'one might want to define kerberos access to more than one ldap server\n')

greenfoot	bluej	1
('greenfoot', 'better', 'bluej', '', '259080', 'i think greenfoot is better than bluej for 8-years old\n')

ubuntu	centos	2
('ubuntu', 'less desirable', 'centos', '', '263966', 'in this respect ubuntu is less desirable on a server than rhel or centos which stick to more mature versions\n')
('ubuntu', 'less', 'centos', '', '263966', 'in this respect ubuntu is less desirable on a server than rhel or centos which stick to more mature versions\n')

swt	swing	2
('swt', 'more simple', 'swing', '', '269117', 'swt is more simple to use than swing especially if this is your first ui\n')
('swt', 'more', 'swing', '', '269117', 'swt is more simple to use than swing especially if this is your first ui\n')

boost	stl	3
('boost', 'less standard', 'stl', '', '548827', 'boost libraries are generally less mature and less standard than stl\n')
('boost', 'better', 'stl', '', '277306', 'i ve used both for the same project boost is better integrated with the stl and especially c++ exceptions\n')
('stl', 'better', 'boost', '', '548848', 'once you re past the basics with c++ learning how to use parts of stl and then how it works will be better than tackling boost\n')

rdiscount	bluecloth	1
('rdiscount', 'more reliable', 'bluecloth', 'reliability', '277564', 'rdiscount seems to be much faster and more reliable than bluecloth\n')

glassfish	jboss	2
('glassfish', 'better', 'jboss', '', '283405', 'i think glassfish is a better j2ee app server to start with than jboss\n')
('glassfish', 'better j2ee', 'jboss', '', '283405', 'i think glassfish is a better j2ee app server to start with than jboss\n')

parent	children	3
('parent', 'more content', 'children', '', '289468', 'i have come up with a few ideas such as traversing the html document tree to its leaves adding up the length of the text and only seeing what other text the parent has if the parent gives us more content than the children do\n')
('parent', 'more', 'children', '', '289468', 'i have come up with a few ideas such as traversing the html document tree to its leaves adding up the length of the text and only seeing what other text the parent has if the parent gives us more content than the children do\n')
('parent', 'more n', 'children', '', '931234', 'in the same breath i would also like to be able to run a specific number of child processes at any given time say for example n children running concurrently whenever one exits the parent process starts another child if needed but has no more than n children at any given moment\n')

redmine	trac	4
('redmine', 'better', 'trac', '', '323542', 'the authors of redmine are trying to create a better trac than trac\n')
('redmine', 'more complete', 'trac', '', '380757', 'i d recommend redmine like the other posters as it is more complete than trac\n')
('redmine', 'better', 'trac', '', '386835', 'redmine is an open source ruby on rails application that supports multiple projects much better than trac and seems to be much easier to administer\n')
('redmine', 'nicer', 'trac', '', '294097', 'redmine handles multiple projects and sub-projects right out of the box and overall seems nicer than trac\n')

mapguide	arcmap	1
('mapguide', 'more', 'arcmap', '', '303277', 'i mostly work with esri software though i ve had a little bit of work with mapguide mostly for clients whose engineering departments are using cad more than arcmap\n')

redmine	bugzilla	1
('redmine', 'more', 'bugzilla', '', '323542', 'i think you ll find that your team will like either trac or redmine more than bugzilla or mantis\n')

activemq	rabbitmq	2
('activemq', 'way more', 'rabbitmq', '', '333440', 'apache activemq which is way more popular than qpid or rabbitmq - or indeed any jms provider would work just fine\n')
('activemq', 'way more popular', 'rabbitmq', 'usability', '333440', 'apache activemq which is way more popular than qpid or rabbitmq - or indeed any jms provider would work just fine\n')

chars	int	17
('chars', 'far more', 'int', '', '857530', 'since sql server doesn t support named constants chars is far more descriptive than int when used in stored procedure and views as constants\n')
('chars', 'more usable', 'int', '', '964541', 'sometimes chars type is more usable than int - fixed size chars doesn t take much storage room and you can see enumerated values directly in database fields\n')
('chars', 'shorter', 'int', '', '955645', 'if you use chars x where x 4 your chars key will be shorter than a int one\n')
('chars', 'greater', 'int', '', '955645', 'if you use chars x where x 4 your chars key will be greater than a int one\n')
('chars', 'type more usable', 'int', '', '964541', 'sometimes chars type is more usable than int - fixed size chars doesn t take much storage room and you can see enumerated values directly in database fields\n')
('int', 'bigger', 'chars', 'memory', '819327', 'int is usually bigger than chars â more suitable for calculations but not so suitable for byte-level manipulation\n')
('chars', 'more descriptive', 'int', '', '857530', 'since sql server doesn t support named constants chars is far more descriptive than int when used in stored procedure and views as constants\n')
('chars', 'far more descriptive', 'int', '', '857530', 'since sql server doesn t support named constants chars is far more descriptive than int when used in stored procedure and views as constants\n')
('int', 'better bet', 'chars', '', '380092', 'well then an int field may just be a better bet than a chars 50\n')
('int', 'often faster', 'chars', 'performance', '966107', 'far better to use a surrogate key and yes a join on an int is often faster and you can join in delete staments in many databases not use the slower subquery especially since names tend to be longer than a few chars\n')
('chars', 'type more', 'int', '', '964541', 'sometimes chars type is more usable than int - fixed size chars doesn t take much storage room and you can see enumerated values directly in database fields\n')
('chars', 'less room', 'int', '', '337764', 'for lookup tables with a low volume of rows you can use a 3 chars code as the primary key as this takes less room than an int but the performance difference is negligible\n')
('int', 'usually bigger', 'chars', 'memory', '819327', 'int is usually bigger than chars â more suitable for calculations but not so suitable for byte-level manipulation\n')
('int', 'less operations', 'chars', '', '914297', 'plain chars having unspecified signed-ness allows compilers to select whichever representation is more efficient for the target architecture on some architectures zero extends a one-byte value to the size of int requires less operations thus making plain chars unsigned while on others the instruction set makes sign-extending more natural and plain chars gets implements as signed\n')
('int', 'less', 'chars', '', '914297', 'plain chars having unspecified signed-ness allows compilers to select whichever representation is more efficient for the target architecture on some architectures zero extends a one-byte value to the size of int requires less operations thus making plain chars unsigned while on others the instruction set makes sign-extending more natural and plain chars gets implements as signed\n')
('int', 'more', 'chars', '', '784328', 'for example if the string is going to store a decimal-formatted 32-bit int you know that you do not need more than 11 chars to do so\n')
('int', 'wider', 'chars', '', '721224', 'an implicit cast is disallowed as an int is wider has a greater range of values than a chars\n')

firefox	safari	3
('firefox', 'more forgiving', 'safari', '', '365945', 'but i haven t yet figured out whether it s me writing sloppy code with firefox perhaps being more forgiving than safari or if it s safari or if it s jquery\n')
('firefox', 'just better', 'safari', '', '463954', 'firefox is just better for web development and i prefer safari overall\n')
('safari', 'faster', 'firefox', 'performance', '899967', 'in safari we found that the dom level 0 took twice the time off the dom level 2 but was still four times faster than either firefox case\n')

declarative	imperative	1
('declarative', 'code easier', 'imperative', 'usability', '382518', 'declarative code is easier to make bug-free than imperative code\n')

tortoisegit	svn	1
('tortoisegit', 'better', 'svn', '', '384102', 'nobody has ever accused git of being easy-to-use no tortoisegit for example although i hear it s coming so you might be better off with svn beanstalk\n')

free	memmove	1
('free', 'more efficient', 'memmove', 'performance', '388146', 'the compiler is free to choose a method that is more efficient than memmove\n')

macports	fink	1
('macports', 'more', 'fink', '', '388422', 'i second macports it is more up to date than fink and closer to the freebsd ports system where i come from\n')

sortedlist	sorteddictionary	12
('sortedlist', 'less', 'sorteddictionary', '', '389813', 'sortedlist uses less memory than sorteddictionary\n')
('sorteddictionary', 'faster insertion', 'sortedlist', 'performance', '389813', 'sorteddictionary has faster insertion and removal operations for unsorted data o log n as opposed to o n for sortedlist\n')
('sorteddictionary', 'faster', 'sortedlist', 'performance', '472158', 'sorteddictionary has faster insertion and removal operations for unsorted data o log n as opposed to o n for sortedlist\n')
('sortedlist', 'less', 'sorteddictionary', '', '890438', 'sortedlist uses less memory than sorteddictionary\n')
('sortedlist', 'less memory', 'sorteddictionary', 'memory', '472158', 'sortedlist uses less memory than sorteddictionary\n')
('sortedlist', 'faster', 'sorteddictionary', 'performance', '890438', 'if the sortedlist is populated all at once from sorted data it s faster than sorteddictionary\n')
('sorteddictionary', 'faster insertion', 'sortedlist', 'performance', '472158', 'sorteddictionary has faster insertion and removal operations for unsorted data o log n as opposed to o n for sortedlist\n')
('sortedlist', 'less memory', 'sorteddictionary', 'memory', '890438', 'sortedlist uses less memory than sorteddictionary\n')
('sortedlist', 'less', 'sorteddictionary', '', '472158', 'sortedlist uses less memory than sorteddictionary\n')
('sorteddictionary', 'faster', 'sortedlist', 'performance', '389813', 'sorteddictionary has faster insertion and removal operations for unsorted data o log n as opposed to o n for sortedlist\n')
('sortedlist', 'less memory', 'sorteddictionary', 'memory', '389813', 'sortedlist uses less memory than sorteddictionary\n')
('sortedlist', 'faster', 'sorteddictionary', 'performance', '389813', 'if the list is populated all at once from sorted data sortedlist is faster than sorteddictionary\n')

haskell	scheme	1
('haskell', 'earlier', 'scheme', '', '392733', 'some background i m learning haskell now having earlier worked with scheme and cl and a little foray into clojure\n')

tcl	perl	1
('tcl', 'worse', 'perl', '', '393362', 'tcl is no better nor worse than perl ruby python or any other scripting language in this regard -- they all do basic file operations with equal aplomb\n')

tree	trie	1
('tree', 'more', 'trie', '', '402806', 'a suffix tree is more or less an advanced trie here you can also search for any substrings in o c as for the trie\n')

prolog	lisp	1
('prolog', 'easier', 'lisp', 'usability', '406426', 'i also checked prolog and it seems a pretty cool language easy to do relations between data and easier than lisp but i d like to hear what you think\n')

awt	swing	3
('awt', 'more useful', 'swing', 'usability', '408820', 'are there any cases where awt is more useful advised to use than swing or vice-versa\n')
('swing', 'less memory', 'awt', 'memory', '416947', 'i mean by light weight i thought maybe the swing components occupy less memory than the awt components\n')
('awt', 'more', 'swing', '', '408820', 'are there any cases where awt is more useful advised to use than swing or vice-versa\n')

pyglet	pyopengl	2
('pyglet', 'actually more', 'pyopengl', '', '408981', 'i d say that pyglet is actually more evolved than pyopengl\n')
('pyglet', 'more', 'pyopengl', '', '408981', 'i d say that pyglet is actually more evolved than pyopengl\n')

fireworks	photoshop	2
('fireworks', 'easier', 'photoshop', 'usability', '410176', 'i find fireworks has an easier time dealing with vectors because they re first class objects while in photoshop they re actually a combination of a vector mask and a colour fill\n')
('fireworks', 'easier time', 'photoshop', 'usability', '410176', 'i find fireworks has an easier time dealing with vectors because they re first class objects while in photoshop they re actually a combination of a vector mask and a colour fill\n')

profiler	perf	2
('profiler', 'more detailed', 'perf', '', '410465', 'a profiler gives you more detailed information which can help to diagnose and fix perf problems\n')
('profiler', 'more', 'perf', '', '410465', 'a profiler gives you more detailed information which can help to diagnose and fix perf problems\n')

modulo	subtraction	1
('modulo', 'slower', 'subtraction', 'performance', '414763', 'as you can see modulo is about an order of magnitude slower than subtraction\n')

subtract	multiplying	1
('subtract', 'more reliable', 'multiplying', 'reliability', '417342', 'adding and subtract logarithms of factorials then taking the exponential at the end is more reliable than multiplying and dividing factorials directly\n')

intersect	contains	1
('intersect', 'greater', 'contains', '', '422343', 'given two ranges a a b and c c d do they intersect is one greater than the other or does one contains the other\n')

ntlm	kerberos	3
('kerberos', 'faster', 'ntlm', 'performance', '592640', 'kerberos is complex to set up and even though it generally is considered faster than ntlm this is only true when you reach a certain limit of simultanious users on your site\n')
('kerberos', 'slower', 'ntlm', 'performance', '592640', 'for a low traffic site the huge tokens that kerberos send across the network actually makes it slower than ntlm\n')
('ntlm', 'better', 'kerberos', '', '453751', 'in fact in some ways ntlm is better than kerberos\n')

x86	mips	1
('x86', 'more complex instructions', 'mips', 'usability', '454121', 'x86 have more complex instructions than mips\n')

velocity	freemarker	3
('velocity', 'simpler', 'freemarker', 'usability', '463420', 'velocity is simpler than freemarker\n')
('freemarker', 'more', 'velocity', '', '463420', 'freemarker is more powerful than velocity\n')
('freemarker', 'more powerful', 'velocity', 'usability', '463420', 'freemarker is more powerful than velocity\n')

trac	bugzilla	1
('trac', 'better', 'bugzilla', '', '471259', 'trac s issue tracking is little better than bugzilla s...i know a lot of folks love trac but i find it very inflexible\n')

ram	disk	6
('disk', 'larger available', 'ram', 'memory', '969709', 'in future these lists may be read from disk and larger than available ram\n')
('ram', 'faster', 'disk', 'performance', '472333', 'ram is much faster than disk\n')
('ram', 'alway faster', 'disk', 'performance', '565933', 'buy as much memory as you can afford ram is alway faster than io from disk\n')
('ram', 'slower', 'disk', 'performance', '848572', 'memory is a bottleneck to performance ram runs slower than the cpu and if you re paging to disk than it s really slow\n')
('disk', 'cheaper', 'ram', '', '516941', 'disk space is probably always going to be cheaper than ram\n')
('ram', 'much faster', 'disk', 'performance', '472333', 'ram is much faster than disk\n')

hash	salt	1
('hash', 'longer', 'salt', '', '482268', 'you can safely store the salt in the db because working out a string from its hash is just as hard when you know some of the string as it is when you know none of it provided the password itself is longer than the salt and long enough and strong enough to take a long time to crack by brute force at least 6 chars with at least one case change and a number or non-alphanumeric i d say\n')

ftp	smb	1
('ftp', 'faster', 'smb', 'performance', '482412', 'push log files to a central location ftp is faster than smb the windows ftp command can be automated with -s scriptfile\n')

hex	binary	4
('hex', 'just less', 'binary', '', '484849', 'hex is just less verbose and can express anything a binary number can\n')
('hex', 'just less verbose', 'binary', '', '484849', 'hex is just less verbose and can express anything a binary number can\n')
('hex', 'representation better way', 'binary', '', '484066', 'it seems the from a readability and usability standpoint the hex representation is a better way of defining binary numbers\n')
('hex', 'representation better', 'binary', '', '484066', 'it seems the from a readability and usability standpoint the hex representation is a better way of defining binary numbers\n')

subclassing	superclass	5
('subclassing', 'more specific', 'superclass', '', '488946', 'if the subclassing is more specific then it might fill in all by 2 of the arguments to its superclass __init__ method\n')
('superclass', 'always smaller less', 'subclassing', 'memory', '839664', 'for my understanding the superclass is always smaller less complex then the subclassing\n')
('subclassing', 'bigger interface', 'superclass', 'memory', '933047', 'you can t cast a superclass in a subclassing because the subclassing may have a bigger interface than the superclass means the subclassing can have functions like getunixtimestamp that the superclass doesn t have\n')
('subclassing', 'more', 'superclass', '', '488946', 'if the subclassing is more specific then it might fill in all by 2 of the arguments to its superclass __init__ method\n')
('superclass', 'always smaller', 'subclassing', 'memory', '839664', 'for my understanding the superclass is always smaller less complex then the subclassing\n')

jscript	vbscript	3
('jscript', 'infinitely more', 'vbscript', '', '495528', 'when writing code in jscript as i am wont to do as i have never been a fan of asp.net and jscript is infinitely more elegant than vbscript you can call upon the arguments collection\n')
('jscript', 'more elegant', 'vbscript', 'usability', '495528', 'when writing code in jscript as i am wont to do as i have never been a fan of asp.net and jscript is infinitely more elegant than vbscript you can call upon the arguments collection\n')
('jscript', 'infinitely more elegant', 'vbscript', 'usability', '495528', 'when writing code in jscript as i am wont to do as i have never been a fan of asp.net and jscript is infinitely more elegant than vbscript you can call upon the arguments collection\n')

mergesort	in-place	2
('mergesort', 'more', 'in-place', '', '497849', 'another reason is that mergesort needs more memory because it s hard to implement it as an in-place sort\n')
('mergesort', 'more memory', 'in-place', 'memory', '497849', 'another reason is that mergesort needs more memory because it s hard to implement it as an in-place sort\n')

sproutcore	javascriptmvc	1
('sproutcore', 'more heavyweight', 'javascriptmvc', 'memory', '509703', 'it s probably overkill for what you need but sproutcore is an mvc framework and it doesn t look any more heavyweight than javascriptmvc or trimpath s junction\n')

xslt	xsl-fo	1
('xslt', 'more', 'xsl-fo', '', '512569', 'all in all t4 to me is more of a inside vs code-generation tool to quickly create c# or other files while xslt is more of a data-processing data-transformation tool to turn data from xml into another format typically html or pdf using xsl-fo\n')

qt-designer	wxpython	2
('qt-designer', 'more powerful', 'wxpython', 'usability', '515325', 'as far as i can tell qt-designer is more powerful than any wxpython counterpart like boa constructor and pyglade\n')
('qt-designer', 'more', 'wxpython', '', '515325', 'as far as i can tell qt-designer is more powerful than any wxpython counterpart like boa constructor and pyglade\n')

freebsd	linux	1
('freebsd', 'much better', 'linux', '', '530086', 'just a tip but from personal experience i ve found that freebsd works much better on low-end hardware than a modern linux distro does\n')

localization	translation	1
('localization', 'easier', 'translation', 'usability', '539857', 'localization it s easier to translation text than images\n')

emacs	vim	5
('vim', 'quicker', 'emacs', '', '977462', 'maybe not productive in the same way - i d say vim is quicker for editing files emacs is better at doing everything else again i would personally say things like flymake-mode vcs bindings are such are quicker to use than the vim equivalent\n')
('emacs', 'more powerful', 'vim', 'usability', '977462', 'emacs is more powerful than vim it s scripting engine is far more flexible and there are far more scripts modes and the likes built around emacs\n')
('emacs', 'more', 'vim', '', '977462', 'emacs is more powerful than vim it s scripting engine is far more flexible and there are far more scripts modes and the likes built around emacs\n')
('emacs', 'better', 'vim', '', '977462', 'maybe not productive in the same way - i d say vim is quicker for editing files emacs is better at doing everything else again i would personally say things like flymake-mode vcs bindings are such are quicker to use than the vim equivalent\n')
('emacs', 'much older', 'vim', '', '551342', 'since emacs is much older than the extensible vim as opposed to the relatively non-extensible vi it has a much larger collection of extension modes covering almost any purpose you can imagine\n')

cvsnt	svn	1
('cvsnt', 'simply much better', 'svn', '', '559225', 'just a wild guess here but if you re using cvsnt on the server this observation might be based on the fact that cvsnt simply is much better at merging than svn because it has the notion of mergepoints\n')

tree	skip-lists	1
('tree', 'better', 'skip-lists', '', '576296', 'so as you can see the random binary search tree was rather a lot better than the skip-lists\n')

pdfbox	itext	1
('pdfbox', 'better', 'itext', '', '584198', 'start with pdfbox as it s text extraction abilities are better than itext s\n')

pagespeed	yslow	1
('pagespeed', 'better', 'yslow', '', '584890', 'in my testing so far google s pagespeed addon is far and above much better than yslow\n')

openrasta	asp.net-mvc	1
('openrasta', 'much closer', 'asp.net-mvc', '', '585100', 'i d suggest having a look at openrasta which is much closer to http semantics than asp.net asp.net-mvc is\n')

adventureworks	northwind	1
('adventureworks', 'better', 'northwind', '', '597847', 'talk about sql server 2005 adventureworks is better than northwind\n')

width	margin	1
('width', 'nicer', 'margin', '', '604314', 'edit someone else suggested css and i believe that using the height and width directives from css will give you the same result as using the same attributes of the tag but doesn t limit you strictly to images and a will play nicer with any margin or padding directives you might use\n')

strncpy	memcpy	1
('strncpy', 'slower', 'memcpy', 'performance', '610260', 'but for the example you give it doesn t matter - if it s going to fail it will be in the initial strlen so strncpy doesn t buy you anything in terms of safety and presumbly strncpy is slower as it has to both check bounds and for nul and any difference between memcpy and strcpy isn t worth changing code for speculatively\n')

spaces	delimiter	1
('spaces', 'field', 'delimiter', '', '612937', 'awk uses a comma surrounded by 0 or more spaces as field delimiter\n')

pypy	cpython	1
('pypy', 'faster', 'cpython', 'performance', '619544', 'part of the compiler toolchain includes an experimental jit generator now in its fifth incarnation and starting to work really well - the goal is for a jited pypy to run much faster than cpython\n')

ironpython	cpython	2
('ironpython', 'faster', 'cpython', 'performance', '620976', 'i m not sure exactly how you re drawing the conclusion that ironpython is faster than cpython\n')
('cpython', 'more', 'ironpython', '', '845066', 'i am however no cpython guru and can get so much more out of ironpython than cpython as i can easily leverage the .net platform on which i am far more at home\n')

uiview	catransition	1
('uiview', 'more limited', 'catransition', '', '630770', 'the uiview class methods are convenience methods for common animations but are more limited than catransition\n')

google-chrome	firefox	1
('google-chrome', 'less', 'firefox', '', '640303', 'using the same data google-chrome does in less than 5 seconds what took ie and firefox 10 to 15 seconds to accomplish\n')

ini	config	1
('ini', 'less', 'config', '', '677459', 'ini is really a much simpler format than xml if you have less than fifty config options and they are not nested\n')

dawg	trie	2
('dawg', 'more', 'trie', '', '681760', 'it is a structure similar to but twice as space-efficient as the dawg that is more efficient than the trie which only compresses prefixes\n')
('dawg', 'more efficient', 'trie', 'performance', '681760', 'it is a structure similar to but twice as space-efficient as the dawg that is more efficient than the trie which only compresses prefixes\n')

typo3	joomla	1
('typo3', 'more professional', 'joomla', '', '683028', 'i didn t work with these applications yet but afaik typo3 and ezpublish both php are considered much more professional than joomla\n')

subtraction	multiplication	1
('subtraction', 'cheaper', 'multiplication', '', '698780', 'addition subtraction for the rectangular bound calculation is cheaper than multiplication\n')

repeater	gridview	1
('repeater', 'better', 'gridview', '', '721563', 'maybe a repeater is better but you will be fine with a gridview if you are familiar with it\n')

gridview	datalist	2
('gridview', 'much more', 'datalist', '', '756327', 'gridview has much more bells and whistles than datalist\n')
('gridview', 'much more bells', 'datalist', '', '756327', 'gridview has much more bells and whistles than datalist\n')

protected	public	3
('protected', 'more sense', 'public', '', '761864', 'therefore the only types that should have access to a constructor are its derived types and hence protected makes much more sense than public\n')
('protected', 'much more sense', 'public', '', '761864', 'therefore the only types that should have access to a constructor are its derived types and hence protected makes much more sense than public\n')
('protected', 'much more', 'public', '', '761864', 'therefore the only types that should have access to a constructor are its derived types and hence protected makes much more sense than public\n')

installation	upgrade	1
('installation', 'much better', 'upgrade', '', '765929', 'as for production side of things upgrading your database in transaction msi-style installation is much better than attempting to upgrade at each app startup since you can potentially end up with desynchronized database-application versioning\n')

cin	cout	1
('cin', 'printf faster', 'cout', 'performance', '780111', 'scanf is faster than cin printf is faster than cout etc\n')

put	get	1
('put', 'method better', 'get', '', '794801', 'right now i would have to say the put method is better since it works and i could not get the webservice to work\n')

nginx	lighttpd	2
('nginx', 'even more ridiculously', 'lighttpd', '', '803700', 'it s simple and nginx is even more ridiculously fast and lightweight than lighttpd\n')
('nginx', 'even more', 'lighttpd', '', '803700', 'it s simple and nginx is even more ridiculously fast and lightweight than lighttpd\n')

lxml	beautifulsoup	2
('lxml', 'more', 'beautifulsoup', '', '804829', 'lxml is supposed to be much faster and efficient and can do much more than beautifulsoup\n')
('lxml', 'faster', 'beautifulsoup', 'performance', '880821', 'i ve found that even if lxml is faster than beautifulsoup for documents that size it s usually best to try to reduce the size to a few kb via regex or direct stripping and load that into bs as you are doing now\n')

sml	haskell	1
('sml', 'better', 'haskell', '', '811801', 'because sml is eagerly evaluated the execution model is far easier to comprehend and debugging via printf works a lot better than in haskell\n')

rtf	doc	2
('rtf', 'somewhat easier', 'doc', 'usability', '813984', 'if the latter is what you want you could use rtf which is somewhat easier than the doc format\n')
('rtf', 'easier', 'doc', 'usability', '813984', 'if the latter is what you want you could use rtf which is somewhat easier than the doc format\n')

actionscript	mxml	1
('actionscript', 'better', 'mxml', '', '814811', 'i would say pure actionscript is better for programming whether you use flash ide or flex ide is not that relevant and mxml is better for non-programmers to combine the components programmed in as\n')

haskell	ocaml	3
('haskell', 'better', 'ocaml', '', '996052', 'i would just use ocaml but haskell s syntax is so much better than ocaml s and haskell is pure and has cool features such as type classes\n')
('haskell', 'fewer industrial', 'ocaml', '', '827594', 'haskell has fewer industrial users than ocaml and although it does have multicore support it is still being developed in a very unproductive direction\n')
('haskell', 'fewer', 'ocaml', '', '827594', 'haskell has fewer industrial users than ocaml and although it does have multicore support it is still being developed in a very unproductive direction\n')

svn2git	git-svn	1
('svn2git', 'better results', 'git-svn', '', '840730', 'using svn2git might produce better results than git-svn if you have tags or branches.\n')

qcubed	qcodo	1
('qcubed', 'community much stronger', 'qcodo', '', '843733', 'qcubed community is much stronger at the moment so you might want to check in qcodo forum for your answers on basic problems but post on the qcubed forum\n')

des	rsa	1
('des', 'larger', 'rsa', 'memory', '864659', 'des code is 8 times larger than rsa\n')

colt	jama	2
('colt', 'more powerful', 'jama', 'usability', '879201', 'colt does this already but i have found it is more complicated and more powerful than jama which may explain why simple functions are slower with colt\n')
('jama', 'slower', 'colt', 'performance', '879201', 'colt does this already but i have found it is more complicated and more powerful than jama which may explain why simple functions are slower with colt\n')

division	addition	2
('division', 'more tightly', 'addition', '', '884697', 'the addition and subtraction is okay because the types of a and b force them to be performed using floating point arithmetic - but because division binds more tightly than addition and subtraction it s like using the brackets above only the immediate operands are considered\n')
('division', 'more', 'addition', '', '884697', 'the addition and subtraction is okay because the types of a and b force them to be performed using floating point arithmetic - but because division binds more tightly than addition and subtraction it s like using the brackets above only the immediate operands are considered\n')

max	rank	1
('max', 'faster', 'rank', 'performance', '886136', 'while i think gbn s answer is probably sufficient i m wondering whether use of an over clause to establish a max date per id attribute with which to reduce the select in a where clause wouldn t be faster than a rank\n')

modulo	addition	1
('modulo', 'slower integer', 'addition', 'performance', '898763', 'integer multiplication division and modulo are much slower than integer addition and subtraction\n')

bitvector	bitarray	1
('bitvector', 'more efficient', 'bitarray', 'performance', '903548', 'why is the bitvector 32 structure more efficient than bitarray\n')

push	pull	2
('push', 'far more scalable', 'pull', '', '912233', 'why do you think that push is far more scalable then pull for starters\n')
('push', 'far more', 'pull', '', '912233', 'why do you think that push is far more scalable then pull for starters\n')

max	min	1
('max', 'less', 'min', '', '924296', 'probably the line drawer was a bresenham modified to skip the points drawn unless they were greater than max or less than min\n')

xna	spritebatch	1
('xna', 'more', 'spritebatch', '', '941685', 'in xna when is it appropriate to render your game content using more than one spritebatch\n')

16-bit	64bit	1
('16-bit', 'less efficient', '64bit', 'performance', '942017', 'in fact for x86 64 processors performing 32-bit or 16-bit operations are less efficient than 64bit or 8-bit operations due to the operand prefix byte that has to be decoded\n')

coalesce	sum	1
('coalesce', 'less', 'sum', '', '960774', 'i m pretty sure the linker will coalesce equivalent strings so the total will be less than the sum of the parts for these sections but i guess typically not by much\n')

vba	vbscript	1
('vba', 'better', 'vbscript', '', '962399', 'vb6 vba though a little better than vbscript in general still has many similar issues where for their domain they require much more boiler plate to do simple tasks than what i would like and have seen in other scripting languages\n')

imagemagick	libjpeg	1
('imagemagick', 'slower', 'libjpeg', 'performance', '965313', 'basically imagemagick was only slightly slower than libjpeg\n')

sudo	passwd	1
('sudo', 'better', 'passwd', '', '982185', 'sudo is better in most respects but still requires a passwd which asroot does not\n')

