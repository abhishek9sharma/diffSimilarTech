0---------------------------------------------------

performant,operations
interpreted-language are inherently less performant than compiled-language - c will generally outperform python - some operations more than others

level,performant,assembly
then c which is one those languages closer to the processor level is very performant and generally speaking compiled-language because they turn your code into assembly language are more performant than interpreted-language

1---------------------------------------------------

definition,slower,drawback,execution
python is an interpreted-language so by definition is slower than other compiled-language but the drawback in the execution speed is not even noticeable in most of applications

faster
that being said a compiled-language like c will almost always be faster than an interpreted-language like javascript

little,slower
php is an interpreted-language so will run a little slower than a compiled-language

slower
and perl like any interpreted-language is much slower than a compiled-language

orders,magnitude,slower
an interpreted-language will typically run one to two orders of magnitude slower than a compiled-language

faster,ball
a compiled-language will generally run faster than an interpreted-language so i think ruby and php start behind the eight ball but it really comes down to how you use the language and how you structure the code

different,opinion,slower
this is a good question but should be formulated a little different in my opinion for example why are interpreted-language slower than compiled-language

slower
fact is that interpreted-language like php are always slower than a compiled-language

slower,difference,negligible
mostly interpreted-language are a bit slower compared with compiled-language but i guess the difference is almost negligible in coffeescript javascript because of node.js

slower,overhead
this makes interpreted-language generally slower than compiled-language due to the overhead of running the vm or interpreter

operation-for-operation,slower,reality,application
while ruby and python are both interpreted-language and operation-for-operation slower than compiled-language the reality is in executing an application only a small portion of cpu time is spent in your code and the majority is spent into the built-in libraries you call into which are often native implementations and thus are as fast as compiled code

programs,faster,uncompiled
in my general programming experience compiled c c++ programs generally run faster than most other compiled-language like java or even compiled python and almost always run faster than interpreted-language like uncompiled python or javascript

time,slower
it should be noted that interpreted-language are inherently many time slower than natively compiled-language

execution,speed,slower,need
interpreted-language execution speed are slower than compiled-language true but once there is need for more speed you can call in compiled stuff through gems or micro services

faster
from what i know a compiled-language such as c++ is much faster than an interpreted-language such as javascript

slower
interpreted-language tend to be but not always are significantly slower than compiled-language

slower,cpu,line
naturally interpreted-language will run slower than compiled-language as compiled code can be ran blindly by the cpu where as compiled code needs to be checked ran line by line

2---------------------------------------------------

easier,possible
an interpreted-language surely makes it easier but this is still entirely possible with compiled-language like c

easier,bytecode
while java could be described as a compiled and interpreted-language it s probably easier to think of java itself as a compiled-language and java bytecode as an interpreted-language

3---------------------------------------------------

performance,programs,better
performance of programs in compiled-language is significantly better than that of an interpreted-language

examples,better,performance
writing in a compiled-language java or c++ in your examples would almost certainly give better performance than an interpreted-language like php

other---------------------------------------------------

guess,efficiency,benefit,statements,smaller
my guess is that in interpreted-language the efficiency benefit in using switch statements is indeed smaller than in compiled-language

better
are compiled-language better than interpreted-language or vice-versa

overhead
especially in an interpreted-language like php where classes add more overhead than a compiled-language

dynamic,common
this is usually seen in dynamic interpreted-language but is less common in compiled-language

